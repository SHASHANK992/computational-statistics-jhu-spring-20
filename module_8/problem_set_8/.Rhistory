cvdata <- read.table('CVdata.txt')
cvdata <- file.choose()
View(cvdata)
cvdata <- file.choose()
cvdata <- scan(file.choose())
cvdataX <- read.table('CVdataX.txt')
cvdataY <- read.table('CVdataY.txt')
View(cvdataX)
scan(file.choose())
### Problem 1
cvdataX <- scan(file.choose())
cvdataY <- scan(file.choose())
head(cvdataX)
# part (a)
# Plot the (X,Y)
plot(cvdataX, cvdataY)
# part (a)
# Plot the (X,Y)
plot(cvdataX, cvdataY, main = 'CVdata',
xlab = 'X', ylab = 'Y')
mu_hat <- mean(cvdataX)
mu_hat
range(cvdataY)
seq(range(cvdataY))
seq(range(cvdataY), length.out = 100)
seq(from = range(cvdataY)[1], to = range(cvdataY)[2], length.out = 100)
dnorm(x = seq(from = range(cvdataY)[1],
to = range(cvdataY)[2],
length.out = 100),
mean = mu_hat, sd = sqrt(2))
lines(dnorm(x = seq(from = range(cvdataY)[1],
to = range(cvdataY)[2],
length.out = 100),
mean = mu_hat, sd = sqrt(2))
)
lines(dnorm(x = seq(from = range(cvdataX)[1],
to = range(cvdataX)[2],
length.out = 100),
mean = mu_hat, sd = sqrt(2))
)
lines(seq(from = range(cvdataX)[1],
to = range(cvdataX)[2],
length.out = 100),
dnorm(x = seq(from = range(cvdataX)[1],
to = range(cvdataX)[2],
length.out = 100),
mean = mu_hat, sd = sqrt(2))
)
x_seq <- seq(from = range(cvdataX)[1], to = range(cvdataX)[2], length.out = 100)
# part (a)
# Plot the (X,Y)
plot(cvdataX, cvdataY, main = 'CVdata',
xlab = 'X', ylab = 'Y') # plot data
mu_hat <- mean(cvdataX) # MLE mu
x_seq <- seq(from = range(cvdataX)[1],
to = range(cvdataX)[2],
length.out = 100) # Generate x range
lines(x_seq, dnorm(x = x_seq, mean = mu_hat, sd = sqrt(2)))
g <- function(x) {
(1 / (2 * sqrt(pi))) * exp((-1 / 4) * (x - 2)^2)
}
g(cvdataX)
R <- function(y, g) {
abs(y - g)
}
R(y = cvdataY, g = g(cvdataX))
N <- 100
sum(R(y = cvdataY, g = g(cvdataX))) / N
length(cvdataX)
N <- length(cvdataX)
n <- length(cvdataX)
sum(R(y = cvdataY, g = g(cvdataX))) / n
sum(R(y = cvdataY, g = g(cvdataX))) / n
# part (a)
# Plot the (X,Y)
plot(cvdataX, cvdataY, main = 'CVdata',
xlab = 'X', ylab = 'Y') # plot data
mu_hat <- mean(cvdataX) # MLE mu
x_seq <- seq(from = range(cvdataX)[1],
to = range(cvdataX)[2],
length.out = 100) # Generate x range
lines(x_seq, # Plot fitted line
dnorm(x = x_seq,
mean = mu_hat,
sd = sqrt(2)),
col = 'blue')
legend("topleft", legend = 'Fitted Line', lty = 1, col = 'blue')
# part (b)
S1 <- cvdataX[1:50]; S2 <- cvdataX[51:100]
xbar_1 <- mean(S1); xbar_2 <- mean(S2)
xbar_1
xbar_2
g1 <- function(x, xbar = xbar_1) {
(1 / (2 * sqrt(pi))) * exp((-1 / 4) * (x - xbar)^2)
}
g2 <- function(x, xbar = xbar_2) {
(1 / (2 * sqrt(pi))) * exp((-1 / 4) * (x - xbar)^2)
}
S1_y <- cvdataY[1:50]; S2_y <- cvdataY[51:100]
R(y = S2_y, g = g1(x = S2))
R(y = S1_y, g = g2(x = S1))
R(y = S2_y, g = g1(x = S2)) +
R(y = S1_y, g = g2(x = S1))
(1 / n) * sum(R(y = S2_y, g = g1(x = S2)) +
R(y = S1_y, g = g2(x = S1)))
### Problem 3
# part (b)
jackknife <- scan(file.choose())
head(jackknife)
y_bar <- mean(jackknife)
jackknife - y_bar
b2 <- sum((jackknife - y_bar)^4) / (sum((jackknife - y_bar)^2)^2)
b2
k = 1
n <- 100
r <- n / k
b2
r
x = jackknife
j_not_r_vec <- 1:r
Y = jackknife
Y
seq_along(Y)
seq_along(Y) / r
ceiling(seq_along(Y) / r)
split(Y, 1)
split(Y, ceiling(seq_along(Y) / r))
split(x, cut(seq_along(x), n, labels = FALSE))
seq_along(Y)
n
cut(seq_along(Y), n, labels = FALSE)
split(Y, cut(seq_along(Y), n, labels = FALSE))
split(Y, ceiling(seq_along(Y) / r))
?cut
#split(Y, ceiling(seq_along(Y) / r))
n <- nrow(Y)
n
#split(Y, ceiling(seq_along(Y) / r))
n <- length(Y)
n
r_groups <- split(Y, cut(seq_along(Y), n, labels = FALSE))
?split
split(c(1,2,4,5,6,7,8,9,10), 2)
split(c(1,2,4,5,6,7,8,9,10), rep(1,10))
cut(seq_along(Y), n, labels = FALSE)
r=20
r_groups <- split(Y, cut(seq_along(Y), r, labels = FALSE))
r_groups
tail(Y)
rth = 1
n <- length(cvdataX)
n <- length(cvdataX)
# part (a)
# Plot the (X,Y)
plot(cvdataX, cvdataY, main = 'CVdata',
xlab = 'X', ylab = 'Y') # plot data
mu_hat <- mean(cvdataX) # MLE mu
x_seq <- seq(from = range(cvdataX)[1], to = range(cvdataX)[2],
length.out = 100) # Generate x range
lines(x_seq, # Plot fitted line
dnorm(x = x_seq, mean = mu_hat, sd = sqrt(2)),
col = 'blue')
legend("topleft", legend = 'Fitted Line', lty = 1, col = 'blue')
g <- function(x) { # g function
(1 / (2 * sqrt(pi))) * exp((-1 / 4) * (x - 2)^2)
}
R <- function(y, g) { # R function
abs(y - g)
}
sum(R(y = cvdataY, g = g(cvdataX))) / n # Apparent error
g <- function(x, mu_hat = mu_hat) { # g function
(1 / (2 * sqrt(pi))) * exp((-1 / 4) * (x - mu_hat)^2)
}
R <- function(y, g) { # R function
abs(y - g)
}
sum(R(y = cvdataY, g = g(cvdataX))) / n # Apparent error
sum(R(y = cvdataY, g = g(cvdataX))) / n # Apparent error
g(cvdataX)
mu_hat
g <- function(x) { # g function
(1 / (2 * sqrt(pi))) * exp((-1 / 4) * (x - mu_hat)^2)
}
R <- function(y, g) { # R function
abs(y - g)
}
sum(R(y = cvdataY, g = g(cvdataX))) / n # Apparent error
g <- function(x) { # g function
dnorm(x = x, mean = mu_hat, sd = sqrt(2))
#(1 / (2 * sqrt(pi))) * exp((-1 / 4) * (x - mu_hat)^2)
}
R <- function(y, g) { # R function
abs(y - g)
}
sum(R(y = cvdataY, g = g(cvdataX))) / n # Apparent error
Y = jackknife
r_groups <- split(Y, cut(seq_along(Y), r, labels = FALSE))
Y <- jackknife
r_groups <- split(Y, cut(seq_along(Y), r, labels = FALSE))
j = 0
LEN
length(r_groups)
r <- length(R)
R
R_list = r_groups
x <- list("a", "b", "c", "d", "e"); # example list
x[-2];
x[-0];
j=0
ifelse(j == 0, x, x[-j])
x
j
ifelse(j == 0, x, x[-j])
j=1
ifelse(j == 0, x, x[-j])
x
if (j == 0) {
# Z <- R_list
Z <- x
} else {
Z <- x[-j]
# Z <- R_list[-j]
}
Z
j
j=2
if (j == 0) {
# Z <- R_list
Z <- x
} else {
Z <- x[-j]
# Z <- R_list[-j]
}
Z
j=0
if (j == 0) {
# Z <- R_list
Z <- x
} else {
Z <- x[-j]
# Z <- R_list[-j]
}
Z
Z
do.call('rbind',Z)
R_list = r_groups
j=0
if (j == 0) {
# Reference: https://stackoverflow.com/questions/1335830/why-cant-rs-ifelse-statements-return-vectors
Z <- R_list
} else {
# Reference: https://stackoverflow.com/questions/652136/how-can-i-remove-an-element-from-a-list
Z <- R_list[-j]
}
Z
do.call('rbind',Z)
dim(do.call('rbind',Z))
unlist(Z)
dim(unlist(Z))
length(unlist(Z))
View(unlist(Z))
as.vector(unlist(Z), mode = 'numeric')
typeof(as.vector(unlist(Z), mode = 'numeric'))
j
Z <- as.vector(unlist(Z), mode = 'numeric')
z_bar <- mean(Z)
Z_b2 <- sum((Z - z_bar)^4) / ((sum((Z - z_bar)^2))^2)
Z_b2
sum((jackknife - y_bar)^4) / (sum((jackknife - y_bar)^2)^2)
j=1
if (j == 0) { # Remove jth group, if j=0 remove none of the groups
# Reference: https://stackoverflow.com/questions/1335830/why-cant-rs-ifelse-statements-return-vectors
Z <- R_list
} else {
# Reference: https://stackoverflow.com/questions/652136/how-can-i-remove-an-element-from-a-list
Z <- R_list[-j]
}
Z
# Reference: https://stackoverflow.com/questions/14924935/using-r-convert-data-frame-to-simple-vector
# Calculate b2 with jth group removed
Z <- as.vector(unlist(Z), mode = 'numeric')
Z
length(Z)
z_bar <- mean(Z)
Z_b2 <- sum((Z - z_bar)^4) / ((sum((Z - z_bar)^2))^2)
Z_b2
b2
Y = jackknife
k = 1
length(Y)
n <- length(Y)
r <- n / k
r_groups <- split(Y, cut(seq_along(Y), r, labels = FALSE))
r_groups
R_j = r_groups
R_list = R_j
r <- length(R_j)
r
sapply(1:r, function(x) {
b2_minus_j(R_list = R_j, j = x)
})
b2_minus_j <- function(R_list, j = 0) {
if (j == 0) { # Remove jth group, if j=0 remove none of the groups
# Reference: https://stackoverflow.com/questions/1335830/why-cant-rs-ifelse-statements-return-vectors
Z <- R_list
} else {
# Reference: https://stackoverflow.com/questions/652136/how-can-i-remove-an-element-from-a-list
Z <- R_list[-j]
}
# Reference: https://stackoverflow.com/questions/14924935/using-r-convert-data-frame-to-simple-vector
# Calculate b2 with jth group removed
Z <- as.vector(unlist(Z), mode = 'numeric')
z_bar <- mean(Z)
Z_b2 <- sum((Z - z_bar)^4) / ((sum((Z - z_bar)^2))^2)
return(Z_b2)
}
sapply(1:r, function(x) {
b2_minus_j(R_list = R_j, j = x)
})
sum(sapply(1:r, function(x) { b2_minus_j(R_list = R_j, j = x) }))
J <- function(R_j) {
r <- length(R_j)
b2_bar <- (1 / r) *
sum(sapply(1:r,
function(x) { b2_minus_j(R_list = R_j, j = x) }))
jackknifed_stat <- r * b2 - (r - 1) * b2_bar
return(jackknifed_stat)
}
jackknifed_T <- J(R_j = r_groups)
jackknifed_T
R_j = r_groups
r <- length(R_j)
b2_bar <- (1 / r) *
sum(sapply(1:r,
function(x) { b2_minus_j(R_list = R_j, j = x) }))
b2_bar
r * b2
(r - 1) * b2_bar
jackknifed_stat <- r * b2 - (r - 1) * b2_bar
jackknifed_stat
denom <- (r * (r - 1))
T_stat <- b2_minus_j(R_list = r_groups, j = 0)
T_stat
r=1
T_j_star <- r * T_stat - (r - 1) *
b2_minus_j(R_list = r_groups, j = x)
x=1
T_j_star <- r * T_stat - (r - 1) *
b2_minus_j(R_list = r_groups, j = x)
T_j_star
(T_j_star - jackknifed_T)^2
sapply(1:r, function(x) {
T_j_star <- r * T_stat - (r - 1) *
b2_minus_j(R_list = r_groups, j = x)
(T_j_star - jackknifed_T)^2
})
sapply(1:r, function(x) {
T_j_star <- r * T_stat - (r - 1) *
b2_minus_j(R_list = r_groups, j = x)
(T_j_star - jackknifed_T)^2
})
n <- length(Y) # Initialize variables
r <- n / k
# Split Y into r groups R = (r_1, r_2, ..., r_r)^T
r_groups <- split(Y, cut(seq_along(Y), r, labels = FALSE))
jackknifed_T <- J(R_j = r_groups) # J(T)
T_stat <- b2_minus_j(R_list = r_groups, j = 0) # T
sapply(1:r, function(x) {
T_j_star <- r * T_stat - (r - 1) *
b2_minus_j(R_list = r_groups, j = x)
(T_j_star - jackknifed_T)^2
})
numer <- sum(
sapply(1:r, function(x) {
T_j_star <- r * T_stat - (r - 1) *
b2_minus_j(R_list = r_groups, j = x)
(T_j_star - jackknifed_T)^2
})
)
numer
denom <- (r * (r - 1))
se_JT <- sqrt(numer / denom)
se_JT
se_jack(Y = jackknife, k = 1)
se_jack <- function(Y = jackknife, # Vector of values
k = 1) { # Size of each group
n <- length(Y) # Initialize variables
r <- n / k
# Split Y into r groups R = (r_1, r_2, ..., r_r)^T
r_groups <- split(Y, cut(seq_along(Y), r, labels = FALSE))
jackknifed_T <- J(R_j = r_groups) # J(T)
T_stat <- b2_minus_j(R_list = r_groups, j = 0) # T
numer <- sum( # numerator
sapply(1:r, function(x) {
T_j_star <- r * T_stat - (r - 1) *
b2_minus_j(R_list = r_groups, j = x)
(T_j_star - jackknifed_T)^2
})
)
denom <- (r * (r - 1)) # denominator
se_JT <- sqrt(numer / denom)
return(se_JT)
}
se_jack(Y = jackknife, k = 1)
se_jack(Y = jackknife, k = 5)
jackknife
hist(jackknife)
density(jackknife)
plot(density(jackknife))
additional_samples <- rnorm(n = 1e5, mean = 0, sd = 1)
rbind(jackknife, additional_samples)
jackknife_2 <- c(jackknife, additional_samples)
plot(density(jackknife_2))
se_jack(Y = jackknife_2, k = 1)
additional_samples <- rnorm(n = 1e4, mean = 0, sd = 1)
jackknife_2 <- c(jackknife, additional_samples)
plot(density(jackknife_2))
se_jack(Y = jackknife_2, k = 1)
se_jack(Y = jackknife_2, k = 5)
y_bar <- mean(jackknife)
b2 <- sum((jackknife - y_bar)^4) / ((sum((jackknife - y_bar)^2))^2)
b2 <- sum((jackknife - y_bar)^4) / ((sum((jackknife - y_bar)^2))^2)
b2
y_bar
se_jack(Y = jackknife, k = 1)
se_jack(Y = jackknife, k = 5)
additional_samples2 <- rnorm(n = 1e3, mean = 0, sd = 1)
jackknife_3 <- c(jackknife, additional_samples2)
plot(density(jackknife_3))
se_jack(Y = jackknife_3, k = 1) # 2.653616
se_jack(Y = jackknife_3, k = 5) # 1.186968
# part (c)
se_jack(Y = jackknife, k = 10) # 0.003692711
se_jack(Y = jackknife, k = 15) # 0.003692711
100 / 15
se_jack(Y = jackknife, k = 20) # 0.004929861
100/20
se_jack(Y = jackknife_2, k = 10) # 1.186968
se_jack(Y = jackknife_2, k = 20) # 1.186968
se_jack(Y = jackknife_3, k = 10) # 0.3549629
se_jack(Y = jackknife_3, k = 20) # 0.3549629
b2 <- function(Y) {
y_bar <- mean(Y)
sum((Y - y_bar)^4) /
((sum((jackknife - y_bar)^2))^2)
}
b2(Y = jackknife) # 0.02669995
b2(jackknife_2)
b2(jackknife_3)
