n <- 1e2
set.seed(0)
normal_sample <- sort(rnorm(n = n, mean = 0, sd = 1))
df1 <- data.frame(x = qnorm(p = (1:n)/n), y = normal_sample)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
plot(df1$x, df1$y, main = 'Q-Q Plot',
xlab = 'Normal(0,1)', ylab = 'x')
abline(fit)
test_seed = 0
q3_qq <- function(n = 1e2, test_seed = 0) {
set.seed(test_seed)
normal_sample <- sort(rnorm(n = n, mean = 0, sd = 1))
df1 <- data.frame(x = qnorm(p = (1:n)/n), y = normal_sample)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
plot(df1$x, df1$y, main = 'Q-Q Plot (seed=0)',
xlab = 'Normal(0,1)', ylab = 'x')
abline(fit)
}
q3_qq(n = 1e2, test_seed = 0)
q3_qq(n = 1e2, test_seed = 1)
q3_qq(n = 1e2, test_seed = 2)
q3_qq(n = 1e2, test_seed = 3)
q3_qq_vec <- Vectorize(q3_qq, vectorize.args = c('test_seed'))
par(mfrow = c(2, 2))
q3_qq_vec(n = 1e2, test_seed = 0:3)
### Q3
q3_qq <- function(n = 1e2, test_seed = 0) {
set.seed(test_seed)
normal_sample <- sort(rnorm(n = n, mean = 0, sd = 1))
df1 <- data.frame(x = qnorm(p = (1:n)/n), y = normal_sample)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
plot(df1$x, df1$y, main = paste0('Q-Q Plot (seed=', test_seed,')'),
xlab = 'Normal(0,1)', ylab = 'x')
abline(fit)
}
q3_qq_vec <- Vectorize(q3_qq, vectorize.args = c('test_seed'))
par(mfrow = c(2, 2))
q3_qq_vec(n = 1e2, test_seed = 0:3)
### Q3
q3_qq <- function(n = 1e2, test_seed = 0) {
set.seed(test_seed)
normal_sample <- rnorm(n = n, mean = 0, sd = 1)
normal_sample <- sort(normal_sample)
df1 <- data.frame(x = qnorm(p = (1:n)/n), y = normal_sample)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
plot(df1$x, df1$y, main = paste0('Q-Q Plot (seed=', test_seed,')'),
xlab = 'Normal(0,1)', ylab = 'x')
abline(fit)
}
q3_qq_vec <- Vectorize(q3_qq, vectorize.args = c('test_seed'))
par(mfrow = c(2, 2))
q3_qq_vec(n = 1e2, test_seed = 0:3)
par(mfrow = c(3, 3))
q3_qq_vec(n = 1e2, test_seed = 0:8)
dev.off()
q3_qq(n = 1e2, test_seed = 4)
q3_qq(n = 1e3, test_seed = 4)
par(mfrow = c(3, 3))
q3_qq_vec(n = 1e3, test_seed = 0:8)
9:18
length(9:18)
q3_qq_vec(n = 1e3, test_seed = 9:17)
2 * Inf
Inf^Inf
Inf - Inf
dev.off()
### Q4
multiforgraph <- read.table('MultiforGraph.txt')
head(multiforgraph)
### Q4
x <- read.table('multi1.txt', header = TRUE)
y <- read.table('multi2.txt', header = TRUE)
z <- read.table('multi3.txt', header = TRUE)
x
y
z
multiforgraph <- cbind(x, y, z)
head(multiforgraph)
four_plot <- function(variable, var_name) {
# plot 1 x_i vs. i
n <- length(variable)
plot(1:n, variable, main = 'x Against Its Index',
ylab = 'x', xlab = 'Index')
# plot 2 x_i+1 vs. x_i
plot(variable[1:(n - 1)], variable[2:n],
main = 'x Lagged', ylab = 'x[1:(n-1)]', xlab = 'x[2:n]')
# plot 3 histogram
# num_breaks <- 1 + log2(n)
hist(variable, main = 'Histogram of x', xlab = 'x') #,
#breaks = num_breaks)
# plot 4 Q-Q plot
# prob plot
plot(variable, pnorm(variable), main = 'Probability Plot',
xlab = latex2exp::TeX(paste0(var_name, '_i')),
ylab = latex2exp::TeX(paste0('P(X $\\leq$', var_name, '_i', ')')))
# q-q
sort_variable <- sort(variable)
plot(qnorm((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Normal(0,1)', ylab = var_name)
}
four_plot(variable = x, var_name = 'x')
### Q4
x <- read.table('multi1.txt', header = TRUE)[[1]] # load data
x
### Q4
x <- read.table('multi1.txt', header = TRUE)[[1]] # load data
y <- read.table('multi2.txt', header = TRUE)[[1]]
z <- read.table('multi3.txt', header = TRUE)[[1]]
multiforgraph <- cbind(x, y, z)
head(multiforgraph)
four_plot(variable = x, var_name = 'x')
par(mfrow = c(2, 2))
four_plot(variable = x, var_name = 'x')
four_plot <- function(variable, var_name) {
# plot 1 x_i vs. i
n <- length(variable)
plot(1:n, variable, main = 'x Against Its Index',
ylab = 'x', xlab = 'Index')
# plot 2 x_i+1 vs. x_i
plot(variable[1:(n - 1)], variable[2:n],
main = 'x Lagged', ylab = 'x[1:(n-1)]', xlab = 'x[2:n]')
# plot 3 histogram
# num_breaks <- 1 + log2(n)
hist(variable, main = 'Histogram of x', xlab = 'x') #,
#breaks = num_breaks)
# plot 4 Q-Q plot
# q-q
sort_variable <- sort(variable)
plot(qnorm((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Normal(0,1)', ylab = var_name)
}
par(mfrow = c(2, 2))
four_plot(variable = x, var_name = 'x')
four_plot(variable = y, var_name = 'y')
four_plot(variable = z, var_name = 'z')
four_plot <- function(variable, var_name) {
# plot 1 x_i vs. i
n <- length(variable)
plot(1:n, variable, main = paste0(var_name, ' Against Its Index'),
ylab = var_name, xlab = 'Index')
# plot 2 x_i+1 vs. x_i
plot(variable[1:(n - 1)], variable[2:n],
main = paste0(var_name, ' Lagged'),
ylab = paste0(var_name, '[1:(n-1)]'),
xlab = paste0(var_name, '[2:n]'))
# plot 3 histogram
# num_breaks <- 1 + log2(n)
hist(variable, main = paste0('Histogram of ', var_name), xlab = var_name)
# plot 4 Q-Q plot
# q-q
sort_variable <- sort(variable)
plot(qnorm((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Normal(0,1)', ylab = var_name)
}
par(mfrow = c(2, 2))
four_plot(variable = x, var_name = 'x')
four_plot(variable = y, var_name = 'y')
four_plot(variable = z, var_name = 'z')
four_plot <- function(variable, var_name) {
# plot 1 x_i vs. i
n <- length(variable)
plot(1:n, variable, main = paste0(var_name, ' Against Its Index'),
ylab = var_name, xlab = 'Index')
# plot 2 x_i+1 vs. x_i
plot(variable[1:(n - 1)], variable[2:n],
main = paste0(var_name, ' Lagged'),
ylab = paste0(var_name, '[1:(n-1)]'),
xlab = paste0(var_name, '[2:n]'))
# plot 3 histogram
# num_breaks <- 1 + log2(n)
hist(variable, main = paste0('Histogram of ', var_name), xlab = var_name)
# plot 4 Q-Q plot
# q-q
sort_variable <- sort(variable)
plot(qnorm((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Normal(0,1)', ylab = var_name)
df1 <- data.frame(x = qnorm(p = (1:n)/n), y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
# plot(df1$x, df1$y, main = paste0('Q-Q Plot (seed=', test_seed,')'),
# xlab = 'Normal(0,1)', ylab = 'x')
abline(fit)
}
par(mfrow = c(2, 2))
four_plot(variable = x, var_name = 'x')
four_plot(variable = y, var_name = 'y')
four_plot(variable = z, var_name = 'z')
dev.off()
# x-variable Uniform Q-Q
sort_variable <- sort(variable)
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
x
# x-variable Uniform Q-Q
sort_variable <- sort(x)
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
var_name <- 'x'
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
df1 <- data.frame(x = qnorm(p = (1:n)/n), y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
df1 <- data.frame(x = qunif(p = (1:n)/n), y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
df1 <- data.frame(x = qunif(p = (1:n)/n), y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
# y-variable Uniform Q-Q
sort_variable <- sort(y)
var_name <- 'y'
mean(y)
y_quantile <- qnorm((1:n)/n, mean(y), sd = sd(y)
plot(), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
y_quantile <- qnorm((1:n)/n, mean(y), sd = sd(y))
# y-variable Uniform Q-Q
sort_variable <- sort(y)
var_name <- 'y'
y_quantile <- qnorm((1:n)/n, mean(y), sd = sd(y))
plot(y_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\bar{x}, s)'), ylab = var_name)
plot(y_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{x}, s)'), ylab = var_name)
df1 <- data.frame(x = y_quantile, y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
par(mfrow = c(1,3))
# x-variable Uniform Q-Q
sort_variable <- sort(x)
var_name <- 'x'
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
df1 <- data.frame(x = qunif(p = (1:n)/n), y = sort_variable)
abline(fit)
# y-variable Uniform Q-Q
sort_variable <- sort(y)
var_name <- 'y'
y_quantile <- qnorm((1:n)/n, mean(y), sd = sd(y))
plot(y_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{x}, s)'), ylab = var_name)
df1 <- data.frame(x = y_quantile, y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
par(mfrow = c(2, 2))
# x-variable Uniform Q-Q
sort_variable <- sort(x)
var_name <- 'x'
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
df1 <- data.frame(x = qunif(p = (1:n)/n), y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
# y-variable Uniform Q-Q
sort_variable <- sort(y)
y_quantile <- qnorm((1:n)/n, mean(y), sd = sd(y))
var_name <- 'y'
plot(y_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{x}, s)'), ylab = var_name)
df1 <- data.frame(x = y_quantile, y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
# z-variable Uniform Q-Q
sort_variable <- sort(z)
var_name <- 'z'
y_quantile <- qnorm((1:n)/n, mean(z), sd = sd(z))
plot(y_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{x}, s)'), ylab = var_name)
dev.off()
par(mfrow = c(2, 2))
# x-variable Uniform Q-Q
sort_variable <- sort(x)
var_name <- 'x'
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
df1 <- data.frame(x = qunif(p = (1:n)/n), y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
# y-variable Uniform Q-Q
sort_variable <- sort(y)
var_name <- 'y'
y_quantile <- qnorm((1:n)/n, mean(y), sd = sd(y))
plot(y_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{x}, s)'), ylab = var_name)
df1 <- data.frame(x = y_quantile, y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
# z-variable Uniform Q-Q
sort_variable <- sort(z)
var_name <- 'z'
z_quantile <- qnorm((1:n)/n, mean(z), sd = sd(z))
plot(z_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{x}, s)'), ylab = var_name)
df1 <- data.frame(x = z_quantile, y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
dev.off()
par(mfrow = c(2, 2))
# x-variable Uniform Q-Q
sort_variable <- sort(x)
var_name <- 'x'
plot(qunif((1:n)/n), sort_variable, main = 'Q-Q Plot',
xlab = 'Uniform(0,1)', ylab = var_name)
df1 <- data.frame(x = qunif(p = (1:n)/n), y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
# y-variable Uniform Q-Q
sort_variable <- sort(y)
var_name <- 'y'
y_quantile <- qnorm((1:n)/n, mean(y), sd = sd(y))
plot(y_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{y}, s)'), ylab = var_name)
df1 <- data.frame(x = y_quantile, y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
# z-variable Uniform Q-Q
sort_variable <- sort(z)
var_name <- 'z'
z_quantile <- qnorm((1:n)/n, mean(z), sd = sd(z))
plot(z_quantile, sort_variable, main = 'Q-Q Plot',
xlab = latex2exp::TeX('Normal(\\bar{z}, s)'), ylab = var_name)
df1 <- data.frame(x = z_quantile, y = sort_variable)
fit <- lm(formula = y~x, data = df1[1:(n-1),])
abline(fit)
splom(data = multiforgraph)
dev.off()
splom(x~., data = multiforgraph)
splom('x~.', data = multiforgraph)
splom(x = x~., data = multiforgraph)
multiforgraph
head(multiforgraph)
?splom
splom(x = ~multiforgraph, data = multiforgraph)
splom(x = ~multiforgraph[1:3], data = multiforgraph)
splom(x = ~multiforgraph[1:2], data = multiforgraph)
splom(mtcars[c(1,3,4,5,6)],
main="MTCARS Data")
splom(x = multiforgraph[1:3])
multiforgraph[[1]]
typeof(multiforgraph)
as.data.frame(multiforgraph)
typeof(as.data.frame(multiforgraph))
typeof(as.data.frame(multiforgraph)[[1]])
multiforgraph <- data.frame(x = x, y = y, z = z)
splom(x = multiforgraph[1:3])
image(multiforgraph)
df <- c(4,12,1,3,6,1,3,2,5,2,7,2)
df <- c(4,12,1,3,6,1,3,2,5,2,7,2)
y <- df
y^2
mean(y^2)
length(y)
r <- 3; k <- 4
T_stat <- mean(y^2)
y1 <- df[-c(1:r)]
y1
y1 <- df[-c(1:k)]
T_1a <- mean(y1^2)
T_1 <- r * T_stat - (r - 1) * T_1a
T_1 <- r * T_stat - (r - 1) * T_1a
T_1
y1 <- df[-c(5:9)]
y1
y1
y1 <- df[-c(1:k)]
y1
y2 <- df[-c(5:9)]
y2
y1 <- df[-c(1:4)]
y1
y2 <- df[-c(5:8)]
y2
y3 <- df[c(9:12)]
y3
y3 <- df[-c(9:12)]
y3
length(y3)
length(y2)
length(y1)
y1 <- df[-c(1:4)]
T_1a <- mean(y1^2)
T_1 <- r * T_stat - (r - 1) * T_1a
y2 <- df[-c(5:8)]
T_2a <- mean(y1^2)
T_2 <- r * T_stat - (r - 1) * T_2a
y3 <- df[-c(9:12)]
T_3a <- mean(y1^2)
T_3 <- r * T_stat - (r - 1) * T_3a
y2 <- df[-c(5:8)]
T_2a <- mean(y2^2)
T_2 <- r * T_stat - (r - 1) * T_2a
y3 <- df[-c(9:12)]
T_3a <- mean(y3^2)
T_3 <- r * T_stat - (r - 1) * T_3a
mean(T_1 + T_2 + T_3)
T_1
T_2
T_3
T_stat
B_J <- (mean(T_1 + T_2 + T_3) - T_stat) * (length(y) - 1)
B_J
T_stat
T_stat
mean(T_1 + T_2 + T_3)
(mean(T_1 + T_2 + T_3) - T_stat)
length(y)
### 3
P1 <- c(0,3,1,1,0)
P2 <- c(1,0,1,2,1)
P3 <- c(1,0,1,3,0)
P4 <- c(1,0,2,2,0)
P5 <- (2,2,0,0,1)
P5 <- c(2,2,0,0,1)
P6 <- c(2,1,1,1,0)
P7 <- c(0,2,1,0,2)
P8 <- c(2,0,2,0,1)
P9 <- c(2,1,1,1,0)
P10 <- c(1,1,1,0,2)
mean(P1)
mean(P2)
mean(P3)
mean(P4)
mean(P5)
mean(P6)
mean(P7)
mean(P8)
mean(P9)
mean(P10)
rep(1,10)
xbar_list <- rep(1,10)
alpha <- 0.2
alpha / 2
P1 <- c(0,3,1,1,0)
P2 <- c(1,0,1,2,1)
P3 <- c(1,0,1,3,0)
P4 <- c(1,0,2,2,0)
P5 <- c(2,2,0,0,1)
P6 <- c(2,1,1,1,0)
P7 <- c(0,2,1,0,2)
P8 <- c(2,0,2,0,1)
P9 <- c(2,1,1,1,0)
P10 <- c(1,1,1,0,2)
### 3
x_vec <- c(2, 4, 5, 7, 9)
x_vec
x_vec[P1]
x_vec[c(P1)]
# P1 <- c(0,3,1,1,0)
P1 <- c(4,4,4,5,7)
# P2 <- c(1,0,1,2,1)
P2 <- c(2,5,7,7,9)
# P3 <- c(1,0,1,3,0)
P3 <- c(2,5,7,7,7)
# P4 <- c(1,0,2,2,0)
P4 <- c(2,5,5,7,7)
# P5 <- c(2,2,0,0,1)
P5 <- c(2,2,4,4,9)
# P6 <- c(2,1,1,1,0)
P6 <- c(2,2,4,5,7)
# P7 <- c(0,2,1,0,2)
P7 <- c(4,4,5,9,9)
# P8 <- c(2,0,2,0,1)
P8 <- c(2,2,5,5,9)
# P9 <- c(2,1,1,1,0)
P9 <- c(2,2,4,5,7)
# P10 <- c(1,1,1,0,2)
P10 <- c(2,4,5,9,9)
mean(P1)
mean(P2)
mean(P3)
mean(P4)
mean(P5)
mean(P6)
mean(P7)
mean(P8)
mean(P9)
mean(P10)
xbar_list <- c(mean(P1), mean(P2), mean(P3), mean(P4), mean(P5), mean(P6), mean(P7), mean(P8), mean(P9), mean(P10))
xbar_list
sort(xbar_list)
mean(x_vec)
5.4 - sqrt(7) * 6
5.4 - sqrt(7) * 4
mean(xbar_list)
xbar_list - mean(x_vec)
mean(xbar_list - mean(x_vec))
### 8
p8 <- data.frame(x1 = c(6,1,4,2),
x2 = c(1,2,3,4),
x3 = c(4,4,6,4),
x4 = c(2,2,2,3))
library(lattice); library(TeachingDemos); library(graphics) # load libraries
parallel(p8)
### 8
p8 <- data.frame(x1 = c(6,5,4,3),
x2 = c(1,2,3,4),
x3 = c(4,4,6,4),
x4 = c(2,2,2,3))
parallel(p8)
p8
### 8
p8 <- data.frame(x1 = c(6,1,4,2),
x2 = c(5,2,4,2),
x3 = c(4,3,6,2),
x4 = c(3,4,4,3))
p8
parallel(p8)
### 6
(0.5) * (((1 / (2 * sqrt(pi)))^(1/5)) / ((9 / 2)^(1 / 5)))
