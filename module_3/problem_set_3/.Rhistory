theta_test <- c(alpha1_old_at, alpha2_old_at) +
alpha_at * g3(x, alpha1_old_at, alpha2_old_at)
theta_test
# part e
backtrack_check <- function(x = oilspills,
alpha1_old_btc,
alpha1_test,
alpha2_old_btc,
alpha2_test,
alpha_btc,
backtracks_btc,
backtrack_flag_btc) {
step_old <- g0(x = x,  # Calculate steps
alpha1 = alpha1_old_btc,
alpha2 = alpha2_old_btc)
step_test <- g0(x = x,
alpha1 = alpha1_test,
alpha2 = alpha2_test)
if(step_test <= step_old) {  # Check if "downhill" or sideways
alpha_btc <- alpha_btc / 2
backtracks_btc <- backtracks_btc + 1
} else {  # Stop tuning alpha
backtrack_flag_btc <- FALSE
}
return(c(alpha_btc, backtracks_btc, backtrack_flag_btc))
}
x = oilspills; epsilon = 1e-10
alpha1_init = 0.7; alpha2_init = 0.5
alpha1_new <- alpha1_old <- alpha1_init  # Initialize variables
alpha2_new <- alpha2_old <- alpha2_init
convergence_flag <- TRUE; count <- 0; backtracks <- 0; alpha <- 1
### Run 1
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new; alpha <- 1
# Tune alpha
alpha_tune_vec <- alpha_tuner(x = x,
alpha1_old_at = alpha1_old,
alpha2_old_at = alpha2_old,
alpha_at = alpha,
backtracks_at = backtracks)
alpha <- alpha_tune_vec[1]; backtracks <- alpha_tune_vec[2] # alpha(1) = 0.0625
# Update old / new variables
# theta_vec <- c(alpha1_old, alpha2_old) + alpha * h_fisher(x, alpha1_old, alpha2_old)
theta_vec <- c(alpha1_old, alpha2_old) + alpha * g3(x, alpha1_old, alpha2_old)
alpha1_new <- theta_vec[1]; alpha2_new <- theta_vec[2]; count <- count + 1
# Check for convergence
convergence_vec <- relative_convergence(alpha1_old, alpha1_new, alpha2_old,
alpha2_new, epsilon)
convergence_value <- convergence_vec[1]; convergence_flag <- convergence_vec[2]
### Run 2
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new; alpha <- 1
# Tune alpha
alpha_tune_vec <- alpha_tuner(x = x, ### log(alpha1 * b1 + alpha2 * b2) : NaNs produced
alpha1_old_at = alpha1_old,
alpha2_old_at = alpha2_old,
alpha_at = alpha,
backtracks_at = backtracks)
x = oilspills; epsilon = 1e-10
alpha1_init = 0.7; alpha2_init = 0.5
alpha1_new <- alpha1_old <- alpha1_init  # Initialize variables
alpha2_new <- alpha2_old <- alpha2_init
convergence_flag <- TRUE; count <- 0; backtracks <- 0; alpha <- 1
### Run 1
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new; alpha <- 1
# Tune alpha
alpha_tune_vec <- alpha_tuner(x = x,
alpha1_old_at = alpha1_old,
alpha2_old_at = alpha2_old,
alpha_at = alpha,
backtracks_at = backtracks)
alpha <- alpha_tune_vec[1]; backtracks <- alpha_tune_vec[2] # alpha(1) = 0.0625
alpha
# Update old / new variables
# theta_vec <- c(alpha1_old, alpha2_old) + alpha * h_fisher(x, alpha1_old, alpha2_old)
theta_vec <- c(alpha1_old, alpha2_old) + alpha * g3(x, alpha1_old, alpha2_old)
alpha1_new <- theta_vec[1]; alpha2_new <- theta_vec[2]; count <- count + 1
# Check for convergence
convergence_vec <- relative_convergence(alpha1_old, alpha1_new, alpha2_old,
alpha2_new, epsilon)
convergence_value <- convergence_vec[1]; convergence_flag <- convergence_vec[2]
### Run 2
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new; alpha <- 1
# Tune alpha
alpha_tune_vec <- alpha_tuner(x = x, ### log(alpha1 * b1 + alpha2 * b2) : NaNs produced
alpha1_old_at = alpha1_old,
alpha2_old_at = alpha2_old,
alpha_at = alpha,
backtracks_at = backtracks)
### Debug alpha_tuner() on iteration 2
x = x; alpha1_old_at = alpha1_old; alpha2_old_at = alpha2_old; alpha_at = alpha; backtracks_at = backtracks
backtrack_flag <- TRUE  # (Re-)Initialize blacktracking variables
# while (backtrack_flag) {  # while-loop paused
theta_test <- c(alpha1_old_at, alpha2_old_at) +
alpha_at * g3(x, alpha1_old_at, alpha2_old_at)
theta_test
c(alpha1_old_at, alpha2_old_at) -
alpha_at * g3(x, alpha1_old_at, alpha2_old_at)
diag(-1,2,2)
## INITIAL VALUES
x = c(0,0)
M = diag(-1,2,2)
itr = 40
alpha.default = 1
alpha = alpha.default
x.values = matrix(0,itr+1,2)
x.values[1,] = x
## OBJECTIVE FUNCTION AND DERIVATIVES
g = function(x){(-1)*((((x[1]^2)+x[2]-11)^2)+(x[1]+(x[2]^2)-7)^2)}
g.prime = function(x){
g.prime.da = (-1)*((4*x[1]^3)+(4*x[1]*x[2])-(42*x[1])+(2*x[2]^2)-14)
g.prime.db = (-1)*((2*x[1]^2)-(26*x[2])-22+(4*x[1]*x[2])+(4*x[2]^3))
out = matrix(c(g.prime.da,g.prime.db),ncol=1)
return(out)
}
## MAIN
for (i in 1:itr){
hessian.inv = solve(M)
xt = x - alpha*hessian.inv%*%g.prime(x)
# REDUCE ALPHA UNTIL A CORRECT STEP IS REACHED
while(g(xt) < g(x)){
alpha = alpha/2
xt = x - alpha*hessian.inv%*%g.prime(x)
}
x.values[i+1,] = x = xt
alpha = alpha.default
}
## OUTPUT
x		# FINAL ESTIMATE
g(x) 		# OBJECTIVE FUNCTION AT ESTIMATE
g.prime(x) 	# GRADIENT AT ESTIMATE
## PLOT OF CONVERGENCE
z = matrix(0,100,100)
x1.max = max(4.5,ceiling(max(x.values[,1])))
x1.min = min(-2,floor(min(x.values[,1])))
x2.max = max(3,ceiling(max(x.values[,2])))
x2.min = min(-2,floor(min(x.values[,2])))
x1 = seq(x1.min,x1.max,length=100)
x2 = seq(x2.min,x2.max,length=100)
for(i in 1:100){
for(j in 1:100){
z[i,j] = g(c(x1[i],x2[j]))
}
}
contour(x1,x2,z,nlevels=20,drawlabels=FALSE)
for(i in 1:itr){
segments(x.values[i,1],x.values[i,2],x.values[i+1,1],
x.values[i+1,2],lty=2)
}
# gradient(alpha1, alpha2)
g3 <- function(x = oilspills, alpha1, alpha2) {
return(matrix(c(g1(x, alpha1, alpha2), g2(x, alpha1, alpha2)), ncol = 1))
}
# Newton-Raphson
nr <- function(x = oilspills, alpha1_init, alpha2_init, epsilon = 1e-5) {
alpha1_new <- alpha1_init; alpha2_new <- alpha2_init  # Initialize variables
convergence_flag <- TRUE; count <- 0
while(convergence_flag) {  # Loop through algorithm
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new
alpha_vec <- c(alpha1_old, alpha2_old) + h(x, alpha1_old, alpha2_old)
alpha1_new <- alpha_vec[1]; alpha2_new <- alpha_vec[2]; count <- count + 1
convergence_vec <- relative_convergence(alpha1_old, alpha1_new, alpha2_old,
alpha2_new, epsilon)
convergence_value <- convergence_vec[1]; convergence_flag <- convergence_vec[2]
}
cat('Iterations: ', count, '\n')
return(c(alpha_vec, count))
}
library(plot3D); library(knitr) # Libraries
### Problem 2.5
oilspills <- read.table(file = "oilspills.dat", header = TRUE)
### part a
# log-likelihood of Poisson
g0 <- function(x = oilspills, alpha1, alpha2) {
n <- x[,2]; b1 <- x[,3]; b2 <- x[,4]
sum(n * log(alpha1 * b1 + alpha2 * b2)) +
sum(-alpha1 * b1 - alpha2 * b2) -
sum(log(factorial(n)))
}
# dg/dalpha1
g1 <- function(x = oilspills, alpha1, alpha2) {
n <- x[,2]; b1 <- x[,3]; b2 <- x[,4]
sum((n * b1) / (alpha1 * b1 + alpha2 * b2)) - sum(b1)
}
# dg/dalpha2
g2 <- function(x = oilspills, alpha1, alpha2) {
n <- x[,2]; b1 <- x[,3]; b2 <- x[,4]
sum((n * b2) / (alpha1 * b1 + alpha2 * b2)) - sum(b2)
}
# gradient(alpha1, alpha2)
g3 <- function(x = oilspills, alpha1, alpha2) {
return(matrix(c(g1(x, alpha1, alpha2), g2(x, alpha1, alpha2)), ncol = 1))
}
# d^2g/dalpha1^2
g4 <- function(x = oilspills, alpha1, alpha2) {
n <- x[,2]; b1 <- x[,3]; b2 <- x[,4]
-sum((n * b1^2) / (alpha1 * b1 + alpha2 * b2)^2)
}
# d^2g/dalpha2^2
g5 <- function(x = oilspills, alpha1, alpha2) {
n <- x[,2]; b1 <- x[,3]; b2 <- x[,4]
-sum((n * b2^2) / (alpha1 * b1 + alpha2 * b2)^2)
}
# d^2g/(dalpha1 * dalpha2)
g6 <- function(x = oilspills, alpha1, alpha2) {
n <- x[,2]; b1 <- x[,3]; b2 <- x[,4]
-sum((n * b1 * b2) / (alpha1 * b1 + alpha2 * b2)^2)
}
# 2x2 Hessian
g7 <- function(x = oilspills, alpha1, alpha2) {
return(matrix(c(
g4(x, alpha1, alpha2), g6(x, alpha1, alpha2),
g6(x, alpha1, alpha2), g5(x, alpha1, alpha2)), ncol = 2))
}
h <- function(x = oilspills, alpha1, alpha2) {  # h function
return(-solve(g7(x, alpha1, alpha2)) %*% g3(x, alpha1, alpha2))
}
relative_convergence <- function(alpha1_old, alpha1_new,  # Test for convergence
alpha2_old, alpha2_new, epsilon) {
old_vec <- c(alpha1_old, alpha2_old)
new_vec <- c(alpha1_new, alpha2_new)
relative_convergence_criterion <- sqrt(sum((new_vec - old_vec)^2)) /
(sqrt(sum(old_vec^2)) + epsilon)
bool_flag <- ifelse(relative_convergence_criterion < epsilon, FALSE, TRUE)
return(c(relative_convergence_criterion, bool_flag))
}
# Newton-Raphson
nr <- function(x = oilspills, alpha1_init, alpha2_init, epsilon = 1e-5) {
alpha1_new <- alpha1_init; alpha2_new <- alpha2_init  # Initialize variables
convergence_flag <- TRUE; count <- 0
while(convergence_flag) {  # Loop through algorithm
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new
alpha_vec <- c(alpha1_old, alpha2_old) + h(x, alpha1_old, alpha2_old)
alpha1_new <- alpha_vec[1]; alpha2_new <- alpha_vec[2]; count <- count + 1
convergence_vec <- relative_convergence(alpha1_old, alpha1_new, alpha2_old,
alpha2_new, epsilon)
convergence_value <- convergence_vec[1]; convergence_flag <- convergence_vec[2]
}
cat('Iterations: ', count, '\n')
return(c(alpha_vec, count))
}
# Test values for Newton-Raphson
test_initializations <- expand.grid(-1:3, -1:3)
# Reference: https://stackoverflow.com/questions/4227223/convert-a-list-to-a-data-frame
test_initializations <- matrix(unlist(test_initializations),
ncol = length(test_initializations))
test_results <- mapply(function(a1, a2) {
tryCatch(nr(alpha1_init = a1, alpha2_init = a2),
error = function(e) NA,
warning = function(w) NA,
message = function(c) NA
)
}, a1 = test_initializations[,1], a2 = test_initializations[,2]
)
test_results <- do.call(rbind, test_results)
test_results <- as.data.frame(test_results)
test_results <- cbind(test_initializations, test_results)
colnames(test_results) <- c("alpha1_init", "alpha2_init", "alpha1", "alpha2", "Iterations")
test_results
# part e
backtrack_check <- function(x = oilspills,
alpha1_old_btc,
alpha1_test,
alpha2_old_btc,
alpha2_test,
alpha_btc,
backtracks_btc,
backtrack_flag_btc) {
step_old <- g0(x = x,  # Calculate steps
alpha1 = alpha1_old_btc,
alpha2 = alpha2_old_btc)
step_test <- g0(x = x,
alpha1 = alpha1_test,
alpha2 = alpha2_test)
if(step_test <= step_old) {  # Check if "downhill" or sideways
alpha_btc <- alpha_btc / 2
backtracks_btc <- backtracks_btc + 1
} else {  # Stop tuning alpha
backtrack_flag_btc <- FALSE
}
return(c(alpha_btc, backtracks_btc, backtrack_flag_btc))
}
alpha_tuner <- function(x = oilspills,
alpha1_old_at,
alpha2_old_at,
alpha_at,
backtracks_at) {
backtrack_flag <- TRUE  # (Re-)Initialize blacktracking variables
while (backtrack_flag) {  # Loop until a suitable alpha is found
# theta_test <- c(alpha1_old_at, alpha2_old_at) + # trying to find first update
# alpha_at * h_fisher(x, alpha1_old_at, alpha2_old_at)
theta_test <- c(alpha1_old_at, alpha2_old_at) + # trying to find first update
alpha_at * g3(x, alpha1_old_at, alpha2_old_at)
backtrack_vec <- backtrack_check(x = x,
alpha1_old_btc = alpha1_old_at,
alpha1_test = theta_test[1],
alpha2_old_btc = alpha2_old_at,
alpha2_test = theta_test[2],
alpha_btc = alpha_at,
backtracks_btc = backtracks_at,
backtrack_flag_btc = backtrack_flag)
alpha_at <- backtrack_vec[1]; backtracks_at <- backtrack_vec[2]
backtrack_flag <- backtrack_vec[3]
}
return(c(alpha_at, backtracks_at))
}
steepest_ascent <- function(x = oilspills,
alpha1_init,
alpha2_init,
epsilon = 1e-10) {
alpha1_new <- alpha1_old <- alpha1_init  # Initialize variables
alpha2_new <- alpha2_old <- alpha2_init
convergence_flag <- TRUE; count <- 0; backtracks <- 0; alpha <- 1
while(convergence_flag) {  # Loop through algorithm
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new; alpha <- 1
# Tune alpha
alpha_tune_vec <- alpha_tuner(x = x,
alpha1_old_at = alpha1_old,
alpha2_old_at = alpha2_old,
alpha_at = alpha,
backtracks_at = backtracks)
alpha <- alpha_tune_vec[1]; backtracks <- alpha_tune_vec[2]
# Update old / new variables
# theta_vec <- c(alpha1_old, alpha2_old) + alpha * h_fisher(x, alpha1_old, alpha2_old)
theta_vec <- c(alpha1_old, alpha2_old) + alpha * g3(x, alpha1_old, alpha2_old)
alpha1_new <- theta_vec[1]; alpha2_new <- theta_vec[2]; count <- count + 1
# Check for convergence
convergence_vec <- relative_convergence(alpha1_old, alpha1_new, alpha2_old,
alpha2_new, epsilon)
convergence_value <- convergence_vec[1]; convergence_flag <- convergence_vec[2]
}
cat('Iterations: ', count, '\n')
cat('Backtracks: ', backtracks, '\n')
return(c(theta_vec, count, backtracks))
}
steepest_ascent(alpha1_init = 1, alpha2_init = 2)
alpha1_init = 1
alpha2_init = 2
x = c(0,0)
M = diag(-1,2,2)
# alpha.default = 1
# alpha = alpha.default
x.values = matrix(0,itr+1,2)
x.values[1,] = x
x.values
hessian.inv = solve(M)
hessian.inv
x
xt = x - alpha*hessian.inv%*%g3(x)
x
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
xt
x
g3(alpha1 = x[1], alpha2 = x[2])
g3
g1(alpha1 = 0, alpha2 = 0)
g1(alpha1 = 0, alpha2 = 1)
x = c(1,0.5)
M = diag(-1,2,2)
itr = 40
# alpha.default = 1
# alpha = alpha.default
x.values = matrix(0,itr+1,2)
x.values[1,] = x
hessian.inv = solve(M)
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
xt
# REDUCE ALPHA UNTIL A CORRECT STEP IS REACHED
while(g0(xt) < g0(x)){
alpha = alpha/2
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
}
x = c(1,0.5)
M = diag(-1,2,2)
itr = 40
# alpha.default = 1
# alpha = alpha.default
x.values = matrix(0,itr+1,2)
x.values[1,] = x
hessian.inv = solve(M)
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
# REDUCE ALPHA UNTIL A CORRECT STEP IS REACHED
while(g0(alpha1 = xt[1], alpha2 = xt[2]) < g0(alpha1 = x[1], alpha2 = x[2])){
alpha = alpha/2
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
}
xt
x.values[i+1,] = x = xt
x = c(1,0.5)
M = diag(-1,2,2)
itr = 40
alpha.default = 1
alpha = alpha.default
x.values = matrix(0,itr+1,2)
x.values[1,] = x
hessian.inv = solve(M)
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
# REDUCE ALPHA UNTIL A CORRECT STEP IS REACHED
while(g0(alpha1 = xt[1], alpha2 = xt[2]) < g0(alpha1 = x[1], alpha2 = x[2])){
alpha = alpha/2
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
}
x.values[i+1,] = x = xt
alpha = alpha.default
alpha
x.values
x = c(1,0.5)
M = diag(-1,2,2)
itr = 40
alpha.default = 1
alpha = alpha.default
x.values = matrix(0,itr+1,2)
x.values[1,] = x
for (i in 1:itr){
hessian.inv = solve(M)
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
# REDUCE ALPHA UNTIL A CORRECT STEP IS REACHED
while(g0(alpha1 = xt[1], alpha2 = xt[2]) < g0(alpha1 = x[1], alpha2 = x[2])){
alpha = alpha/2
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
}
x.values[i+1,] = x = xt
alpha = alpha.default
}
# gradient(alpha1, alpha2)
g3 <- function(x = oilspills, alpha1, alpha2) {
return(matrix(
c(g1(x, alpha1, alpha2),
g2(x, alpha1, alpha2)), ncol = 1)
)
}
x = c(1,0.5)
M = diag(-1,2,2)
itr = 40
alpha.default = 1
alpha = alpha.default
x.values = matrix(0,itr+1,2)
x.values[1,] = x
for (i in 1:itr){
hessian.inv = solve(M)
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
# REDUCE ALPHA UNTIL A CORRECT STEP IS REACHED
while(g0(alpha1 = xt[1], alpha2 = xt[2]) < g0(alpha1 = x[1], alpha2 = x[2])){
alpha = alpha/2
xt = x - alpha*hessian.inv%*%g3(alpha1 = x[1], alpha2 = x[2])
}
x.values[i+1,] = x = xt
alpha = alpha.default
}
x = oilspills; epsilon = 1e-10
alpha1_init = 0.7; alpha2_init = 0.5
alpha1_new <- alpha1_old <- alpha1_init  # Initialize variables
alpha2_new <- alpha2_old <- alpha2_init
convergence_flag <- TRUE; count <- 0; backtracks <- 0; alpha <- 1
### Run 1
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new; alpha <- 1
# Tune alpha
alpha_tune_vec <- alpha_tuner(x = x,
alpha1_old_at = alpha1_old,
alpha2_old_at = alpha2_old,
alpha_at = alpha,
backtracks_at = backtracks)
alpha <- alpha_tune_vec[1]; backtracks <- alpha_tune_vec[2] # alpha(1) = 0.0625
# Update old / new variables
# theta_vec <- c(alpha1_old, alpha2_old) + alpha * h_fisher(x, alpha1_old, alpha2_old)
theta_vec <- c(alpha1_old, alpha2_old) + alpha * g3(x, alpha1_old, alpha2_old)
alpha1_new <- theta_vec[1]; alpha2_new <- theta_vec[2]; count <- count + 1
# Check for convergence
convergence_vec <- relative_convergence(alpha1_old, alpha1_new, alpha2_old,
alpha2_new, epsilon)
convergence_value <- convergence_vec[1]; convergence_flag <- convergence_vec[2]
### Run 2
alpha1_old <- alpha1_new; alpha2_old <- alpha2_new; alpha <- 1
# Tune alpha
alpha_tune_vec <- alpha_tuner(x = x, ### log(alpha1 * b1 + alpha2 * b2) : NaNs produced
alpha1_old_at = alpha1_old,
alpha2_old_at = alpha2_old,
alpha_at = alpha,
backtracks_at = backtracks)
### Debug alpha_tuner() on iteration 2
x = x; alpha1_old_at = alpha1_old; alpha2_old_at = alpha2_old; alpha_at = alpha; backtracks_at = backtracks
backtrack_flag <- TRUE  # (Re-)Initialize blacktracking variables
# while (backtrack_flag) {  # while-loop paused
theta_test <- c(alpha1_old_at, alpha2_old_at) +
alpha_at * g3(x, alpha1_old_at, alpha2_old_at)
g3(x, alpha1_old_at, alpha2_old_at)
alpha1 = 0.5
alpha2 = 0.3
x = oilspills
n <- x[,2]; b1 <- x[,3]; b2 <- x[,4]
log(alpha1 * b1 + alpha2 * b2)
n * log(alpha1 * b1 + alpha2 * b2)
n
alpha1 * b1 + alpha2 * b2
alpha1 * b1
b1
alpha1
alpha2 * b2
alpha1 * b1 + alpha2 * b2
alpha1 * b1
alpha2 * b2
alpha1 * b1 + alpha2 * b2
0.3600+0.066
0.4250+0.051
log(alpha1 * b1 + alpha2 * b2)
log(0.4260)
log(0.476)
n * log(alpha1 * b1 + alpha2 * b2)
sum(n * log(alpha1 * b1 + alpha2 * b2))
sum(-alpha1 * b1 - alpha2 * b2)
sum(log(factorial(n)))
sum(n * log(alpha1 * b1 + alpha2 * b2)) +
sum(-alpha1 * b1 - alpha2 * b2) -
sum(log(factorial(n)))
