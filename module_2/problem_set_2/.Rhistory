plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[10])
abline(v = theta_approximate[10])
theta_approximate[10]
length(theta_approximate)
theta_sequence <- seq(-5, 5, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9])
abline(v = theta_approximate[5])
abline(v = theta_approximate[2])
theta_approximate[9]
theta_approximate[5]
theta_approximate[2]
theta_sequence <- seq(-1, 1, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377
abline(v = theta_approximate[2]) # -0.1787004
sapply(theta_approximate, function(index) abline(v = index))
theta_sequence <- seq(-0.5, -0.1, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377
abline(v = theta_approximate[2]) # -0.1787004
theta_sequence <- seq(-0.3, -0.1, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377
abline(v = theta_approximate[2]) # -0.1787004
theta_sequence <- seq(-0.25, -0.15, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377
abline(v = theta_approximate[2]) # -0.1787004
theta_sequence <- seq(-0.22, -0.16, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377
abline(v = theta_approximate[2]) # -0.1787004
plot(theta_sequence, w, type = 'l', main = 'Cauchy log likelihood'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
plot(theta_sequence, w, type = 'l', main = 'Cauchy log likelihood',
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377 (closest)
abline(v = theta_approximate[2]) # -0.1787004
log_likelihood_cauchy2 <- function(x, theta) {  # First derivative of log-likelihood
return(2 * sum((theta - x) / (1 + (theta - x)^2)))
# return(-2*sum((theta-x)/(1+(theta-x)^2)))
}
log_likelihood_cauchy3 <- function(x, theta) {  # Second derivative of log-likelihood
return(-2 * sum((1 - (theta - x)^2) / ((1 + (theta - x)^2)^2)))
# return(-2*sum((1-(theta-x)^2)/((1+(theta-x)^2)^2)))
}
h_cauchy <- function(x, theta) {  # h function
return(-log_likelihood_cauchy2(x = x, theta = theta) /
log_likelihood_cauchy3(x = x, theta = theta))
# return(log_likelihood_cauchy2(x, theta)/log_likelihood_cauchy3(x, theta))
}
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
# print(counter)
}
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
theta_approximate
theta_sequence <- seq(-0.22, -0.16, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = 'Cauchy log likelihood',
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377 (closest)
abline(v = theta_approximate[2]) # -0.1787004
### Problem 3
cauchy_sample_data <- c(1.77, -0.23, 2.76, 3.80, 3.47,
56.75, -1.34, 4.24, -2.44, 3.29,
3.71, -2.40, 4.53, -0.07, -1.05,
-13.87, -2.53, -1.75, 0.27, 43.21)
log_likelihood_cauchy <- function(x, theta) {
n <- length(x)
return(-n * log(pi) - sum(log(1 + (x - theta)^2)))
}
theta_sequence <- seq(-50, 50, 0.01)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
log_likelihood_cauchy2 <- function(x, theta) {  # First derivative of log-likelihood
return(2 * sum((theta - x) / (1 + (theta - x)^2)))
}
log_likelihood_cauchy3 <- function(x, theta) {  # Second derivative of log-likelihood
return(-2 * sum((1 - (theta - x)^2) / ((1 + (theta - x)^2)^2)))
}
h_cauchy <- function(x, theta) {  # h function
return(-log_likelihood_cauchy2(x = x, theta = theta) /
log_likelihood_cauchy3(x = x, theta = theta))
}
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
# print(counter)
}
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
theta_sequence <- seq(-0.22, -0.16, length.out = 200)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = 'Cauchy log likelihood',
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
abline(v = theta_approximate[9]) # -0.2067094
abline(v = theta_approximate[5]) # -0.1882377 (closest)
abline(v = theta_approximate[2]) # -0.1787004
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat(TeX('$\\theta_0$ =', theta_init, '\n'))
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat(TeX('$\\theta_0$ ='), theta_init, '\n')
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat('theta_init =', theta_init, '\n')
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
log_likelihood_cauchy2 <- function(x, theta) {  # First derivative of log-likelihood
return(2 * sum((x - theta) / (1 + (theta - x)^2)))
}
log_likelihood_cauchy3 <- function(x, theta) {  # Second derivative of log-likelihood
return(-2 * sum((1 - (theta - x)^2) / ((1 + (theta - x)^2)^2)))
}
h_cauchy <- function(x, theta) {  # h function
return(-log_likelihood_cauchy2(x = x, theta = theta) /
log_likelihood_cauchy3(x = x, theta = theta))
}
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat('theta_init =', theta_init, '\n')
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
### Problem 2
problem_2_first_derivative <- function(x) {
return(-x^3 + x - 1)
}
problem_2_second_derivative <- function(x) {
return(-3 * x^2 + 1)
}
h <- function(x) {
return(-problem_2_first_derivative(x) / problem_2_second_derivative(x))
}
nr <- function(x_init, epsilon = 0.01) {
x_new <- x_init  # Initialize variables
x_old <- x_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
x_old <- x_new
x_new <- x_old + h(x_old)
convergence_vector <- absolute_convergence_function(x_t = x_old,
x_update = x_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('x_update: ', x_new, '\n')
}
nr(-1)
absolute_convergence_function <- function(x_t, x_update, epsilon) {
absolute_convergence_criterion <- abs(x_update - x_t)
bool_flag <- ifelse(absolute_convergence_criterion < epsilon, FALSE, TRUE)
return(c(absolute_convergence_criterion, bool_flag))
}
nr <- function(x_init, epsilon = 0.01) {
x_new <- x_init  # Initialize variables
x_old <- x_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
x_old <- x_new
x_new <- x_old + h(x_old)
convergence_vector <- absolute_convergence_function(x_t = x_old,
x_update = x_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('x_update: ', x_new, '\n')
}
nr(-1)
nr(2)
problem_2_function <- function(x) {
return(-(1/4) * x^4 + (1/2) * x^2 - x + 2)
}
xs <- seq(-1.4, -1.2, length.out = 200)
plot(xs, problem_2_function(xs), type = 'l')
abline(v = -1.324718)
abline(v = -1.324732)
y <- c(28, 33, 22, 35, 31)
y_bar <- mean(y)
theta_hat <- y_bar
L2_norm_squared <- function(y, theta) {
return(sum((y - theta)^2))
}
ys <- seq(theta_hat - 10, theta_hat + 10, length.out = 200)
w <- sapply(ys, function(z) L2_norm_squared(y = y, theta = z))
plot(ys, w, type = 'l', main = TeX('$s_p(\\theta)$'),
ylab = 'L2 norm squared', xlab = TeX('$Y$'))
### Problem 1
library(latex2exp)
y <- c(28, 33, 22, 35, 31)
y_bar <- mean(y)
theta_hat <- y_bar
L2_norm_squared <- function(y, theta) {
return(sum((y - theta)^2))
}
ys <- seq(theta_hat - 10, theta_hat + 10, length.out = 200)
w <- sapply(ys, function(z) L2_norm_squared(y = y, theta = z))
plot(ys, w, type = 'l', main = TeX('$s_p(\\theta)$'),
ylab = 'L2 norm squared', xlab = TeX('$Y$'))
L2_norm_squared_derivative <- function(y, theta) {
n <- length(y)
return(-2 * sum(y) + 2 * n * theta)
}
initialize_variables <- function(a_0, b_0) {
x_0 <- (a_0 + b_0) / 2
return(c(x_0, a_0, b_0))
}
absolute_convergence_function <- function(x_t, x_update, epsilon) {
absolute_convergence_criterion <- abs(x_update - x_t)
bool_flag <- ifelse(absolute_convergence_criterion < epsilon, FALSE, TRUE)
return(c(absolute_convergence_criterion, bool_flag))
}
a_b_update <- function(a_t, b_t, x_t) {
if(L2_norm_squared_derivative(y = y, theta = a_t) *
L2_norm_squared_derivative(y = y, theta = x_t) <= 0) {
a_update = a_t; b_update = x_t
} else {
a_update = x_t; b_update = b_t
}
return(c(a_update, b_update))
}
x_update_function <- function(a_update, b_update) {
x_update <- (a_update + b_update) / 2
return(x_update)
}
bisection <- function(a, b) {
initial_vector <- initialize_variables(a_0 = a, b_0 = b)  # Initialize variables
x_t <- initial_vector[1]; a_t <- initial_vector[2]; b_t <- initial_vector[3]
absolute_convergence_criterion <- TRUE
epsilon <- 0.01
counter <- 0
while (absolute_convergence_criterion) {  # Loop through algorithm
a_b_update_vector <- a_b_update(a_t = a_t, b_t = b_t, x_t = x_t)
a_update <- a_b_update_vector[1]; b_update <- a_b_update_vector[2]
x_update <- x_update_function(a_update = a_update, b_update = b_update)
convergence_vector <- absolute_convergence_function(x_t = x_t,
x_update = x_update, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
a_t <- a_update; b_t <- b_update; x_t <- x_update; counter <- counter + 1
}
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('x_update: ', x_update, '\n')
theta <- seq(a, b, length.out = 200)  # Zoom in to check
w <- sapply(theta, function(z) L2_norm_squared(y = y, theta = z))
plot(theta, w, main = TeX('$s_p(\\theta)$'), type = 'l')
legend("topright", legend = c("theta = 30", "bisection update"),
col = c('blue', 'red'), lty = c(1,1))
abline(v = 30, col = 'blue')
abline(v = x_update, col = 'red')
}
bisection(a = 25, b = 35) # 29.79492 (t=9)
bisection(a = 28, b = 32) # 29.80469 (t=8)
bisection(a = 29, b = 30) # 29.80469 (t=6)
bisection(a = 29.6, b = 30) # 29.79375 (t=5)
bisection(a = 29.7, b = 29.9) # 29.79375 (t=4)
bisection(a = 29.75, b = 29.85) # 29.79375 (t=3)
bisection(a = 29.78, b = 29.82) # 29.795 (t=2)
bisection(a = 29.79, b = 29.81)
bisection(a = 29.795, b = 29.805)
bisection(a = 29.798, b = 29.802)
# bisection(a = 29.79999, b = 29.80002) # 29.8 (t=1)
bisection(a = 29.799999, b = 29.800001)
bisection(a = 29.79999, b = 29.80002) # 29.8 (t=1)
bisection(a = 29.798, b = 29.802)
y <- c(28, 33, 22, 35, 31)
y_bar <- mean(y)
theta_hat <- y_bar
L2_norm_squared <- function(y, theta) {
return(sum((y - theta)^2))
}
ys <- seq(theta_hat - 10, theta_hat + 10, length.out = 200)
w <- sapply(ys, function(z) L2_norm_squared(y = y, theta = z))
plot(ys, w, type = 'l', main = TeX('$s_p(\\theta)$'),
ylab = 'L2 norm squared', xlab = TeX('$Y$'))
### Problem 3
### Newton-Raphson
cauchy_sample_data <- c(1.77, -0.23, 2.76, 3.80, 3.47,
56.75, -1.34, 4.24, -2.44, 3.29,
3.71, -2.40, 4.53, -0.07, -1.05,
-13.87, -2.53, -1.75, 0.27, 43.21)
log_likelihood_cauchy <- function(x, theta) {
n <- length(x)
return(-n * log(pi) - sum(log(1 + (x - theta)^2)))
}
theta_sequence <- seq(-50, 50, 0.01)
w <- sapply(theta_sequence, function(index)
log_likelihood_cauchy(x = cauchy_sample_data, theta = index))
plot(theta_sequence, w, type = 'l', main = TeX('$Cauchy log likelihood$'),
ylab = 'log-likelihood theta', xlab = TeX('$\\theta$'))
log_likelihood_cauchy2 <- function(x, theta) {  # First derivative of log-likelihood
return(2 * sum((theta - x) / (1 + (theta - x)^2)))
}
log_likelihood_cauchy3 <- function(x, theta) {  # Second derivative of log-likelihood
return(-2 * sum((1 - (theta - x)^2) / ((1 + (theta - x)^2)^2)))
}
h_cauchy <- function(x, theta) {  # h function
return(-log_likelihood_cauchy2(x = x, theta = theta) /
log_likelihood_cauchy3(x = x, theta = theta))
}
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat('theta_init =', theta_init, '\n')
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
log_likelihood_cauchy2 <- function(x, theta) {  # First derivative of log-likelihood
return(-2 * sum((x - theta) / (1 + (theta - x)^2)))
# return(2 * sum((theta - x) / (1 + (theta - x)^2)))
}
log_likelihood_cauchy3 <- function(x, theta) {  # Second derivative of log-likelihood
return(-2 * sum((1 - (theta - x)^2) / ((1 + (theta - x)^2)^2)))
}
h_cauchy <- function(x, theta) {  # h function
return(-log_likelihood_cauchy2(x = x, theta = theta) /
log_likelihood_cauchy3(x = x, theta = theta))
}
nr <- function(x = cauchy_sample_data, theta_init, epsilon = 0.01) {
theta_new <- theta_init  # Initialize variables
theta_old <- theta_init + 9999
counter <- 0
absolute_convergence_criterion <- TRUE
while(absolute_convergence_criterion) {  # Loop through algorithm
theta_old <- theta_new
theta_new <- theta_old + h_cauchy(x = x, theta = theta_old)
convergence_vector <- absolute_convergence_function(x_t = theta_old,
x_update = theta_new, epsilon = epsilon)
absolute_convergence_value <- convergence_vector[1]
absolute_convergence_criterion <- convergence_vector[2]
counter <- counter + 1
}
cat('theta_init =', theta_init, '\n')
cat('iteration t =', counter, '\n')  # Print results
cat('absolute convergence criterion: ', absolute_convergence_value, '\n')
cat('theta_update: ', theta_new, '\n')
return(theta_new)
}
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
theta_approximate <- sapply(starting_points, function(index) nr(theta_init = index))
starting_points <- c(-11, -1, 0, 1.5, 4,
4.7, 7, 8, 38)
