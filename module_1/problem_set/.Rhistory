# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
read.table(file = 'favorite.data', fileEncoding = 'UTF-16', dec = ',')
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
read.table(file = 'favorite.data')
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
head(read.table(file = 'favorite.data'))
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data')
?favorite
mean(favorite)
favorite
is.na(favorite)
sum(is.na(favorite))
mean(favorite)
favorite
type(favorite)
typeof(favorite)
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- as.data.frame(read.table(file = 'favorite.data'))
mean(favorite)
typeof(favorite)
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data')
favorite[5]
typeof(favorite)
favorite[1]
favorite[1][1]
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- as.data.frame(read.table(file = 'favorite.data')[1])
favorite
typeof(favorite)
favorite[1]
favorite[1][1]
favorite[1][1][1]
favorite[[1]]
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- as.data.frame(read.table(file = 'favorite.data')[[1]])
favorite
typeof(favorite)
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data')
favorite
typeof(favorite)
favorite[[1]]
length(favorite)
typeof(favorite); length(favorite)
favorite[[1]]
typeof(favorite[[1]])
c(favorite[[1]])
typeof(c(favorite[[1]]))
as.data.frame(favorite[[1]])
typeof(as.data.frame(favorite[[1]]))
data.frame(favorite[[1]])
typeof(data.frame(favorite[[1]]))
data.frame(favorite[[1]])
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data')
data.frame(matrix(unlist(favorite), ncol = 1))
typeof(data.frame(matrix(unlist(favorite), ncol = 1)))
favorite <- data.frame(matrix(unlist(favorite), ncol = 1))
favorite[1]
favorite[1,1]
favorite[1000,1]
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data')
favorite[1000,1]
mean(favorite)
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data')
do.call(rbind.data.frame, favorite)
favorite <- do.call(rbind.data.frame, favorite)
favorite[1]
favorite[2]
favorite[10]
typeof(favorite)
favorite
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data')
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data', header = FALSE)
favorite
favorite[1,1]
head(favorite)
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data', header = TRUE)
head(favorite)
# Problem 1
# Reference: https://stackoverflow.com/questions/21101927/read-files-with-extension-data-into-r
favorite <- read.table(file = 'favorite.data', header = FALSE)
View(favorite)
mean(favorite)
mean(c(favorite))
c(favorite)
is.na(favorite)
sum(is.na(favorite))
favorite[1:100]
favorite[1:100,1]
favorite[,1]
mean(favorite[,1])
median(favorite[,1])
sd(favorite[,1])
min(favorite[,1])
max(favorite[,1])
hist(favorite[,1])
hist(favorite[,1], main = 'Histogram of Favorite Data', xlab = 'Value of Favorite')
# Problem 2
rnorm(n = 10000, mean = 0, sd = 1)
# Problem 2
set.seed(1)
rnorm(n = 10000, mean = 0, sd = 1)
# Problem 2
set.seed(1)
random_values <- rnorm(n = 10000, mean = 0, sd = 1)
hist(random_values)
hist(random_values, main = 'Histogram of Random Standard Normal Values', xlab = 'Value of Random Data')
mean(random_values)
median(random_values)
sd(random_values)
# Problem 3
?seq
# Problem 3
a <- seq(from = 5, to = 160, by = 5)
b <- seq(from = 87, to = 56, by = 1)
b <- seq(from = 87, to = 56)
b
d <- a * b
d[15:17]
d[d>2000]
length(d)
d
d[d>6000]
length(d[d>6000])
x = 100
1:x
sqrt(1:x)
which((sqrt(1:x) * 10) %% 2 == 0)
x=1000000
which((sqrt(1:x) * 10) %% 2 == 0)
# Problem 4
find_perfect_squares <- function(x) {
sum(which((sqrt(1:x) * 10) %% 2 == 0))
}
find_perfect_squares(100)
find_perfect_squares(100000)
which((sqrt(1:x) * 10) %% 2 == 0)
x=100
which((sqrt(1:x) * 10) %% 2 == 0)
sqrt(1:x)
int(sqrt(1:x))
integer(sqrt(1:x))
sqrt(1:x)
as.character(sqrt(1:x))
as.numeric(as.character(sqrt(1:x)))
as.character(sqrt(1:x))
sqrt(1:x) && 1
sqrt(1:x) && 1 == 0
x=100
sqrt(1:x) && 1 == 0
sqrt(1:x) && 1 != 0
sqrt(1:x) %% 1 != 0
which(sqrt(1:x) %% 1 != 0)
which(sqrt(1:x) %% 1 == 0)
# Problem 4
find_perfect_squares <- function(x) {
sum(which(sqrt(1:x) %% 1 == 0))
}
find_perfect_squares(100)
find_perfect_squares(100000)
x=100
# Problem 5
find_perfect_squares <- function(x) {
which(sqrt(1:x) %% 1 == 0)
}
# part a
find_perfect_squares(500)
# part b
find_perfect_squares(100000)
# part b
matrix(find_perfect_squares(100000), ncol = 4)
# part b
perfect_squares_matrix <- matrix(find_perfect_squares(100000), ncol = 4)
# part c
perfect_squares_matrix[15, 3]
# Problem 6
seq(from = -pi, to = pi, length.out = 50)
# Problem 6
x <- seq(from = -pi, to = pi, length.out = 50)
y1 <- sin(x)
y2 <- cos(x)
# part a
plot(y1, x)
# part b
plot(y2, x, type = 'l')
?abline
# part c
plot(y2, x, type = 'l')
abline(a = 1, b = -1/3)
# part a
plot(y1, x)
# part a
plot(y1, x, main = 'Part a')
# part b
plot(y2, x, type = 'l', main = 'Part b')
# part c
plot(y2, x, type = 'l', main = 'Part c')
perfect_squares_matrix[15, 3]
perfect_squares_matrix
sink('perfect_squares_matrix.txt')
perfect_squares_matrix
sink()
# part a
plot(y1, x, main = 'Part a')
# part b
plot(y2, x, type = 'l', main = 'Part b')
# part c
plot(y2, x, type = 'l', main = 'Part c')
abline(a = 1, b = -1/3)
