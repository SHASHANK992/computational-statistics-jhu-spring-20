df <- read.table('smooth.txt')
df <- read.csv('smooth.txt')
heaad(df)
head(df)
xs <- read.csv('x_data.txt')
xs
dim(xs)
file.choose()
xs <- scan(file.choose())
xs
ys <- scan(file.choose())
ys
xs
ys
xs <- scan(file.choose())
xs
ys
plot(xs,ys)
source('C:/Users/qizhe/Desktop/JHU/comp_stats/module_12/problem_set_12/ps12.R', echo=TRUE)
df <- data.frame(x = xs, y = ys)
df
sort(df$x)
df[order(df$x),]
df_sort <- df[order(df$x),]
df_sort
plot(df_sort$x, df_sort$y)
plot(df_sort$x, df_sort$y)
odd_values <- function(k) { 2 * k + 1 }
k_seq <- seq(1,11)
k_seq
k_seq <- 1:11
k_candidates <- odd_values(k_seq)
k_candidates
obs_data = df
k=3
df_sort
rownames(df_sort) <- NULL
df_sort
df_sort[1,1]
df_sort[1,]
rownames(df_sort[1,])
max(c(1,3))
n <- nrow(obs_data)
k
k = 3
i=3
i = 3
j_min <- max(c(i - (k - 1) / 2, 1))
j_max <- min(c(i + (k - 1) / 2, n))
j_min
j_max
obs_data[j_min:j_max,]
obs_data[j_min:j_max,'y']
mean(obs_data[j_min:j_max,'y'])
i=1
j_min <- max(c(i - (k - 1) / 2, 1)); j_max <- min(c(i + (k - 1) / 2, n))
s_hat_k <- mean(obs_data[j_min:j_max,'y'])
s_hat_k
j_min
j_max
df
test_row <- df[10,]
test_row
test_row[,1]
rownames(test_row)
s_hat(obs_data = df, x = test_row[,1], i = integer(rownames(test_row)), k = 3)
### The s_hat function calculates the value of s_hat for a given
### span k. It utlizes the formula in eq. 11.5 of the textbook.
### It requires an argument of both the x-value and the i'th row
### index for that x-value.
s_hat <- function(obs_data = df, x, i = 3, k = 3) {
n <- nrow(obs_data) # Initialize variables
j_min <- max(c(i - (k - 1) / 2, 1)); j_max <- min(c(i + (k - 1) / 2, n))
s_hat_k <- mean(obs_data[j_min:j_max,'y'])
return(s_hat_k)
}
test_row <- df[10,]
s_hat(obs_data = df, x = test_row[,1], i = integer(rownames(test_row)), k = 3)
y_vec <- obs_data[,'y']
y_vec
integer(rownames(obs_data[,1]))
rownames(obs_data[,1])
obs_data[,1]
rownames(obs_data)
integer(rownames(obs_data))
s_hat_vec <- Vectorize(s_hat, vectorize.args = c('x', 'i'))
x_vec <- obs_data[,'x']; y_vec <- obs_data[,'y']
n <- nrow(obs_data)
s_hat_vec(obs_data = obs_data, x = x_vec, i = 1:n, k = k)
s_hat(obs_data = obs_data, x = x_vec, i = 1:n, k = k)
(y_vec - s_hat_vec(obs_data = obs_data, x = x_vec, i = 1:n, k = k))
(y_vec - s_hat_vec(obs_data = obs_data, x = x_vec, i = 1:n, k = k))^2
k
n
k=5
k
k
matrix(data = NA, nrow = n, ncol = n)
NA_mat <- matrix(data = NA, nrow = n, ncol = n)
i=1
NA_mat[i,]
(function(x) x + 1)
(1)(function(x) x + 1)
(function(x) x + 1)(1)
(function(x) x + 1) (1)
index_k = k
k
j=1
k / 2
((k - 1) / 2)
j
((k - 1) / 2)
((k - 1) / 2)
n
n
n - ((k - 1) / 2) + 1
n - ((k - 1) / 2)
(((k - 1) / 2) + 1)
((k - 1) / 2)
(n - ((k - 1) / 2))
n - ((k - 1) / 2)
j
(k - 1) / 2
# for j'th row, which columns should be non-zero?
k_half <- (k - 1) / 2
# for j'th row, which columns should be non-zero?
k_half <- (k - 1) / 2
k_half
k_half
j=1
j
j - k_half
k_half - j
k_half + j
j=2
k_half - j
24.27 * 5
