m_bins[lower_interval] <- m_bins[lower_interval] + 1
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-4, 2, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h))
# histogram estimator
hist_est <- function(x, var1 = f12, h = silverman_h) {
# # Check if x outside range of f-hat
# if ((x > var1_range[2]) | (x > var1_range[1])) {
#   return(0)
# }
var1_range <- range(var1) # range of data
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-4, 2, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h))
xs
hist_est_vec(x = xs, var1 = f12, h = silverman_h)
x=1
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x > var1_range[1])) {
# return(0)
print('hi')
}
# histogram estimator
hist_est <- function(x, var1 = f12, h = silverman_h) {
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x < var1_range[1])) {
return(0)
}
var1_range <- range(var1) # range of data
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-4, 2, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h), type = 'l')
range(f12)
xs <- seq(-3, 1.5, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator', xlab = 'X', ylab = 'f-hat')
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = 'X', ylab = latex2exp::TeX('$\hat{f}(x)$'))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = 'X', ylab = latex2exp::TeX('$$\hat{f}(x)$$'))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = 'X', ylab = latex2exp::TeX('\\$\\hat{f}(x)\\$'))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = 'X', ylab = latex2exp::TeX('\$\\hat{f}(x)\$'))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = 'X', ylab = latex2exp::TeX('$\\hat{f}(x)$'))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
lines(density(f12))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
hist(f12)
hist(f12, freq = FALSE)
hist(f12, freq = FALSE, breaks = 20)
lines(density(f12))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
var1_range <- range(var1) # range of data
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
D / m
m=19
D / m
h
silverman_h
m
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
break_pts
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
break_pts
break_pts[2] - break_pts[1]
break_pts[11] - break_pts[10]
seq(var1_range[1], var1_range[2], by = v_k)
seq(var1_range[1], var1_range[2], by = v_k)[1] == var1_range[1]
seq(var1_range[1], var1_range[2], by = v_k)[21] == var1_range[2]
seq(var1_range[1], var1_range[2], by = v_k)[20] == var1_range[2]
seq(var1_range[1], var1_range[2], by = v_k)[19] == var1_range[2]
seq(var1_range[1], var1_range[2], by = v_k)[19]
var1_range[2]
break_pts
tail(break_pts,1)
var_range[2]
var1_range[2]
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
}
m_bins
sum(m_bins)
n
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
}
n
sum(m_bins)
i = min(var1)
lower_interval <- tail(which(i > break_pts), 1)
lower_interval
i = max(var1)
lower_interval <- tail(which(i > break_pts), 1)
lower_interval
sort(var1)
sort(var1, decreasing = TRUE)
m_bins <- matrix(0, nrow = m)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (lower_interval == 0) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
integer(0)
integer(0) == 0
i=min(var1)
lower_interval <- tail(which(i > break_pts), 1)
lower_interval
lower_interval == integer(0)
int(integer(0))
integer(integer(0))
i
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (i == min(var1)) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
sum(m_bins)
p_k <- m_bins / n # proportion per bin
p_k
max(p_k)
# histogram estimator
hist_est <- function(x, var1 = f12, h = silverman_h) {
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x < var1_range[1])) {
return(0)
}
var1_range <- range(var1) # range of data
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (i == min(var1)) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-3, 1.5, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
hist(f12, freq = FALSE, breaks = 20)
lines(density(f12))
hist(f12)
density.default(x = f12)
plot(density.default(x = f12))
m_bins
(m_bins / (n * h)) * h
sum((m_bins / (n * h)) * h)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
?hist
### 10.1
f12 <- read.csv('F12.txt', header = FALSE) # load data
f12 <- log(f12[[1]]) # take log
# histogram estimator
hist_est <- function(x, var1 = f12, h = silverman_h) {
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x < var1_range[1])) {
return(0)
}
var1_range <- range(var1) # range of data
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (i == min(var1)) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-3, 1.5, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
# part (a)
# Silverman's rule of thumb
n <- length(f12)
sigma_hat <- sd(f12)
silverman_h <- ((4 / (3 * n))^(1 / 5)) * sigma_hat
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
# histogram estimator
hist_est <- function(x, var1 = f12, h = silverman_h) {
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x < var1_range[1])) {
return(0)
}
var1_range <- range(var1) # range of data
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (i == min(var1)) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-3, 1.5, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
# histogram estimator
hist_est <- function(x, var1 = f12, h = silverman_h) {
var1_range <- range(var1) # range of data
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x < var1_range[1])) {
return(0)
}
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (i == min(var1)) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-3, 1.5, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
var1 = f12
h = silverman_h
var1_range <- range(var1) # range of data
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x < var1_range[1])) {
return(0)
}
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (i == min(var1)) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
# edge cases, k=20
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(p_k[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(p_k[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
p_k
m_bins
break_pts
c(break_pts[1], break_pts[2])
a = c(break_pts[1], break_pts[2])
a
sum(f12 >= a[1] & f12 <= a[2])
m_bins
head(m_bins)
a = c(break_pts[5], break_pts[6])
sum(f12 >= a[1] & f12 <= a[2])
p_k / v_k
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
v_k
f_hat <- p_k / v_k
# histogram estimator
hist_est <- function(x, var1 = f12, h = silverman_h) {
var1_range <- range(var1) # range of data
# Check if x outside range of f-hat
if ((x > var1_range[2]) | (x < var1_range[1])) {
return(0)
}
D <- var1_range[2] - var1_range[1] # length D of support
# v_k <- D / m # volume of bin (length of interval)
v_k <- h # volume of bin (length of interval)
n <- length(var1)
m <- ceiling(D / v_k)
break_pts <- matrix(NA, nrow = m + 1) # Find break points
break_pts[1] <- var1_range[1]; break_pts[m + 1] <- var1_range[2]
for (i in 1:(m - 1)) {
break_pts[i + 1] <- var1_range[1] + i * v_k # possible bias towards right side
} # create (m + 1) intervals
break_pts <- as.vector(break_pts)
m_bins <- matrix(0, nrow = m)
for (i in var1) { # calculate the number of obs. in each bin
lower_interval <- tail(which(i > break_pts), 1)
m_bins[lower_interval] <- m_bins[lower_interval] + 1
if (i == min(var1)) { # when i == min value
m_bins[1] <- m_bins[1] + 1
}
}
p_k <- m_bins / n # proportion per bin
kth_bin <- tail(which(x >= break_pts), 1)
f_hat <- p_k / v_k
if ((kth_bin >= 1) & (kth_bin <= m)) {
return(f_hat[kth_bin]) # return f-hat
} else if (kth_bin == (m + 1)) {
return(f_hat[m]) # edge case for last bin, return m'th bin
} else {
return(0)
}
}
hist_est_vec <- Vectorize(hist_est, vectorize.args = c('x'))
xs <- seq(-3, 1.5, length.out = 1e3)
plot(xs, hist_est_vec(x = xs, var1 = f12, h = silverman_h),
type = 'l', main = 'Histogram Estimator',
xlab = latex2exp::TeX('$x$'), ylab = latex2exp::TeX('$\\hat{f}(x)$'))
### 10.1
f12 <- read.csv('F12.txt', header = FALSE) # load data
f12 <- log(f12[[1]]) # take log
hist(f12)
lines(density(f12))
hist(f12, freq = FALSE)
lines(density(f12))
