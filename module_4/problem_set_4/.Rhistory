std_normal_pdf <- function(x) dnorm(x = x, mean = 0, sd = 1)
xs <- seq(-5, 5, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Instrumental Distributions',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
legend("topleft", c("Target Distribution", "Instrumental Distribution"),
col = c("black", "red"), lty = c(1,1))
abline(h = 0)
abline(v = 0)
bounds <- seq(-5, 5, length.out = 1000) # graph of instrumental distribution
normal_1_2 <- function(x) dnorm(x = x, mean = 1, sd = sqrt(2))
gs <- normal_1_2(bounds)
alpha <- 0.4
es <- gs / alpha # envelope
lines(bounds, es, col = 'red')
# part (d)
xs <- seq(0, 1, length.out = 500) # graph of target distribution
ys <- triangular_pdf_vec(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Instrumental Distributions',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0,2.5), xlim = c(0, 1.05))
legend("topleft", c("Target Distribution", "Instrumental Distribution"),
col = c("black", "red"), lty = c(1,1))
abline(h = 0)
abline(v = 0)
bounds <- seq(0, 1, length.out = 1000) # graph of instrumental distribution
gs <- dnorm(bounds, mean = 0.5, sd = 0.25)
alpha <- 0.75
es <- gs / alpha
lines(bounds, es, col = 'red')
abline(v = 1, col = 'red')
legend("topleft", c("Target Distribution", "Instrumental Distribution"),
col = c("black", "red"), lty = c(1,1))
if((0 <= x) & (x <= 0.5)) {
return(4 * x)
} else if((0.5 < x) & (x <= 1)) {
return(4 - 4 * x)
} else {
return(0)
}
### Problem 2
# part (a)
triangular_pdf <- function(x) {
if((0 <= x) & (x <= 0.5)) {
return(4 * x)
} else if((0.5 < x) & (x <= 1)) {
return(4 - 4 * x)
} else {
return(0)
}
}
triangular_pdf_vec <- Vectorize(triangular_pdf)
xs <- seq(0, 1, length.out = 500)
ys <- triangular_pdf_vec(x = xs)
par(mfrow = c(1,2))
plot(xs, ys, type = 'l', main = 'Plot of Triangular p.d.f.',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'))
abline(h = 0)
abline(v = 0)
triangular_cdf <- function(x) {
if((0 <= x) & (x <= 0.5)) {
return(2 * x^2)
} else if((0.5 < x) & (x <= 1)) {
return(-2 * x^2 + 4 * x - 1)
} else {
return(0)
}
}
triangular_cdf_vec <- Vectorize(triangular_cdf)
xs <- seq(0, 1, length.out = 500)
ys <- triangular_cdf_vec(x = xs)
plot(xs, ys, type = 'l', main = 'Plot of Triangular CDF',
xlab = TeX('$x$'), ylab = TeX('$F(x)$'))
abline(h = 0)
abline(v = 0)
### Problem 3
# part (a)
std_normal_pdf <- function(x) dnorm(x = x, mean = 0, sd = 1)
xs <- seq(-5, 5, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Instrumental Distributions',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
dev.off()
### Problem 3
# part (a)
std_normal_pdf <- function(x) dnorm(x = x, mean = 0, sd = 1)
xs <- seq(-5, 5, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Instrumental Distributions',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
legend("topleft", c("Target Distribution", "Instrumental Distribution"),
col = c("black", "red"), lty = c(1,1))
abline(h = 0)
abline(v = 0)
bounds <- seq(-5, 5, length.out = 1000) # graph of instrumental distribution
normal_1_2 <- function(x) dnorm(x = x, mean = 1, sd = sqrt(2))
gs <- normal_1_2(bounds)
alpha <- 0.4
es <- gs / alpha # envelope
lines(bounds, es, col = 'red')
legend("topleft", c("Target Distribution", "Instrumental Distribution"),
col = c("black", "red"), lty = c(1,1))
rejection_rule2 <- function(u, y, alpha = 0.4) { # Used in rejection_sampling()
f_y <- std_normal_pdf(x = y)
# Reference: https://www.r-bloggers.com/normal-distribution-functions/
envelope <- normal_1_2(x = y) / alpha
if (u > (f_y / envelope)) {
return(FALSE)
} else {
return(TRUE)
}
}
rejection_sampling2 <- function(num_samples = 1000) {
sampling_matrix <- matrix(NA, nrow = num_samples)
count <- 0; rejects <- 0 # Initialize variables
while (count != num_samples) { # Sample values
y <- normal_1_2(x = 1)
u <- runif(n = 1, min = 0, max = 1)
if (rejection_rule(u, y)) {
sampling_matrix[count + 1] <- y
count <- count + 1 # Accept values
} else {
rejects <- rejects + 1
}
}
cat('Rejects:', rejects)
return(sampling_matrix)
}
set.seed(664)
rejection_sampling2 <- function(num_samples = 10000) {
sampling_matrix <- matrix(NA, nrow = num_samples)
count <- 0; rejects <- 0 # Initialize variables
while (count != num_samples) { # Sample values
y <- normal_1_2(x = 1)
u <- runif(n = 1, min = 0, max = 1)
if (rejection_rule(u, y)) {
sampling_matrix[count + 1] <- y
count <- count + 1 # Accept values
} else {
rejects <- rejects + 1
}
}
cat('Rejects:', rejects)
return(sampling_matrix)
}
set.seed(664)
rejection_samples2 <- rejection_sampling2()
1 - 2880 / 10000 # acceptance rate = 0.69, somewhat close to alpha = 0.75
hist(as.vector(rejection_samples2), xlab = 'Sample Value', # histogram
main = 'Histogram of Samples Using Rejection Sampling')
rejection_samples2
num_samples = 10000
sampling_matrix <- matrix(NA, nrow = num_samples)
count <- 0; rejects <- 0 # Initialize variables
y <- normal_1_2(x = 1)
u <- runif(n = 1, min = 0, max = 1)
y
u
rejection_rule2 <- function(u, y, alpha = 0.4) { # Used in rejection_sampling()
f_y <- std_normal_pdf(x = y)
# Reference: https://www.r-bloggers.com/normal-distribution-functions/
envelope <- normal_1_2(x = y) / alpha
if (u > (f_y / envelope)) {
return(FALSE)
} else {
return(TRUE)
}
}
rejection_sampling2 <- function(num_samples = 10000) {
sampling_matrix <- matrix(NA, nrow = num_samples)
count <- 0; rejects <- 0 # Initialize variables
while (count != num_samples) { # Sample values
y <- rnorm(n = 1, mean = 1, sd = sqrt(2))
u <- runif(n = 1, min = 0, max = 1)
if (rejection_rule(u, y)) {
sampling_matrix[count + 1] <- y
count <- count + 1 # Accept values
} else {
rejects <- rejects + 1
}
}
cat('Rejects:', rejects)
return(sampling_matrix)
}
set.seed(664)
rejection_samples2 <- rejection_sampling2()
1 - 2880 / 10000 # acceptance rate = 0.712, far from alpha = 0.4
hist(as.vector(rejection_samples2), xlab = 'Sample Value', # histogram
main = 'Histogram of Samples Using Rejection Sampling')
1 - 42206 / 10000 # acceptance rate = 0.712, far from alpha = 0.4
42206 / 10000
mean(rejection_samples2)
min(rejection_samples2)
max(rejection_samples2)
y <- rnorm(n = 1, mean = 1, sd = sqrt(2))
y
y <- rnorm(n = 1, mean = 1, sd = sqrt(2))
y
u
f_y <- std_normal_pdf(x = y)
f_y
lines(bounds, gs, col = 'red')
rejection_rule2 <- function(u, y, alpha = 0.4) { # Used in rejection_sampling()
f_y <- std_normal_pdf(x = y)
# Reference: https://www.r-bloggers.com/normal-distribution-functions/
envelope <- normal_1_2(x = y) / alpha
if (u > (f_y / envelope)) {
return(FALSE)
} else {
return(TRUE)
}
}
rejection_sampling2 <- function(num_samples = 10000) {
sampling_matrix <- matrix(NA, nrow = num_samples)
count <- 0; rejects <- 0 # Initialize variables
while (count != num_samples) { # Sample values
y <- rnorm(n = 1, mean = 1, sd = sqrt(2))
u <- runif(n = 1, min = 0, max = 1)
if (rejection_rule2(u, y)) {
sampling_matrix[count + 1] <- y
count <- count + 1 # Accept values
} else {
rejects <- rejects + 1
}
}
cat('Rejects:', rejects)
return(sampling_matrix)
}
set.seed(664)
rejection_samples2 <- rejection_sampling2()
1 - 42206 / 10000 # acceptance rate = 0.712, far from alpha = 0.4
1 - 15024 / 10000 # acceptance rate = 0.712, far from alpha = 0.4
hist(as.vector(rejection_samples2), xlab = 'Sample Value', # histogram
main = 'Histogram of Samples Using Rejection Sampling')
mean(rejection_samples2); var(rejection_samples2)
rejects
1 - 15024 / 10000 # acceptance rate = 0.712, far from alpha = 0.4
### Problem 3
# part (a)
std_normal_pdf <- function(x) dnorm(x = x, mean = 0, sd = 1)
xs <- seq(-5, 5, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Instrumental Distributions',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
abline(h = 0)
abline(v = 0)
bounds <- seq(-5, 5, length.out = 1000) # graph of instrumental distribution
normal_1_2 <- function(x) dnorm(x = x, mean = 1, sd = sqrt(2))
gs <- normal_1_2(bounds)
alpha <- 0.4
es <- gs / alpha # envelope
lines(bounds, es, col = 'red')
legend("topleft", c("Target Distribution", "Instrumental Distribution"),
col = c("black", "red"), lty = c(1,1))
legend("topleft", c("Target Distribution", "Instrumental Distribution / alpha"),
col = c("black", "red"), lty = c(1,1))
plot(xs, ys, type = 'l', main = 'Graph of Target and Instrumental Distributions',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
abline(h = 0)
abline(v = 0)
bounds <- seq(-5, 5, length.out = 1000) # graph of instrumental distribution
gs <- normal_1_2(bounds)
normal_1_2 <- function(x) dnorm(x = x, mean = 1, sd = sqrt(2))
alpha <- 0.4
es <- gs / alpha # envelope
lines(bounds, es, col = 'red')
legend("topleft", c("Target Distribution", "Envelope"),
col = c("black", "red"), lty = c(1,1))
plot(xs, ys, type = 'l', main = 'Graph of Target and Envelope',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
abline(h = 0)
bounds <- seq(-5, 5, length.out = 1000) # graph of instrumental distribution
normal_1_2 <- function(x) dnorm(x = x, mean = 1, sd = sqrt(2))
abline(v = 0)
gs <- normal_1_2(bounds)
alpha <- 0.4
es <- gs / alpha # envelope
lines(bounds, es, col = 'red')
legend("topleft", c("Target Distribution", "Envelope"),
col = c("black", "red"), lty = c(1,1))
# part (d)
xs <- seq(0, 1, length.out = 500) # graph of target distribution
ys <- triangular_pdf_vec(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Envelope',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0,2.5), xlim = c(0, 1.05))
legend("topleft", c("Target Distribution", "Envelope"),
col = c("black", "red"), lty = c(1,1))
abline(h = 0)
abline(v = 0)
bounds <- seq(0, 1, length.out = 1000) # graph of instrumental distribution
gs <- dnorm(bounds, mean = 0.5, sd = 0.25)
alpha <- 0.75
es <- gs / alpha
lines(bounds, es, col = 'red')
abline(v = 1, col = 'red')
legend("topleft", c("Target Distribution", "Envelope"),
col = c("black", "red"), lty = c(1,1))
xs <- seq(-5, 5, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Envelope',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
abline(h = 0)
abline(v = 0)
# part (c)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.8))
abline(h = 0)
abline(v = 0)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
bounds <- seq(-1, 1, length.out = 1000)
dunif(bounds, -1, 1)
ss <- dunif(bounds, -1, 1)
lines(bounds, ss)
ss <- dunif(bounds, -1, 1) / 0.5
lines(bounds, ss)
ss
ss <- dunif(bounds, -1, 1) / 1.5
ss
lines(bounds, ss)
ss <- dunif(bounds, -1, 1) / 2
lines(bounds, ss)
ss <- dunif(bounds, -1, 1) / 2.5
lines(bounds, ss)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
bounds <- seq(-1, 1, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 2.5
lines(bounds, ss)
bounds <- seq(-1, 1, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
# part (c)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
abline(h = 0)
abline(v = 0)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
abline(h = 0)
abline(v = 0)
abline(v = -1)
abline(v = -0.5)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
abline(v = -0.5)
# part (c)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
bounds <- seq(-0.5, 0.5, length.out = 1000)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
abline(v = -0.5)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
bounds <- seq(-1.5, -0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
ss <- dunif(bounds, -1.5, -0.5) / 1.5
lines(bounds, ss)
# part (c)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
bounds <- seq(-1.5, -0.5, length.out = 1000)
ss <- dunif(bounds, -1.5, -0.5) / 1.5
ss
bounds <- seq(-0.5, 0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
ss
bounds <- seq(-1.5, -0.5, length.out = 1000)
ss <- dunif(bounds, -1, 1) / 1.5
ss
ss <- dunif(bounds, -1, 1) / 1.5
lines(bounds, ss)
ss
# part (c)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
abline(h = 1/3)
abline(h = -0.5)
abline(v = -0.5)
abline(v = 0.5)
abline(h = 0.2)
abline(v = -1.2)
abline(v = -1)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
abline(h = 1/3)
abline(v = -0.5)
abline(v = 0.5)
abline(h = 0.2)
abline(v = -1)
abline(h = 0.07)
abline(v = -1.7)
abline(v = -1.8)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
abline(h = 1/3)
abline(v = -0.5)
abline(v = 0.5)
abline(h = 0.2)
abline(v = -1)
abline(h = 0.07)
abline(v = -1.8)
squeeze_function <- function(x) {
if ((-0.5 <= x) & (x <= 0.5)) {
return(1/3)
} else if (((-1 <= x) & (x < -0.5)) | ((0.5 < x) & (x <= 1))) {
return(0.2)
} else if (((-1.8 <= x) & (x < -1)) | ((1 < x) & (x <= 1.8))) {
return(0.07)
} else {
return(0)
}
}
# part (c)
xs <- seq(-3, 3, length.out = 500) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(h = 0)
abline(v = 0)
squeeze_function_vec <- Vectorize(squeeze_function)
bounds <- seq(-3, 3, length.out = 1000)
lines(bounds, squeeze_function_vec(bounds))
lines(bounds, squeeze_function_vec(bounds), col = 'red')
legend("topleft", c("Target Distribution", "Squeezing Function"),
col = c("black", "red"), lty = c(1,1))
# part (c)
xs <- seq(-3, 3, length.out = 5000) # graph of target distribution
ys <- std_normal_pdf(x = xs)
plot(xs, ys, type = 'l', main = 'Graph of Target and Squeezing Function',
xlab = TeX('$x$'), ylab = TeX('$f(x)$'), ylim = c(0, 0.45))
abline(v = 0)
abline(h = 0)
legend("topleft", c("Target Distribution", "Squeezing Function"),
col = c("black", "red"), lty = c(1,1))
squeeze_function <- function(x) {
if ((-0.5 <= x) & (x <= 0.5)) {
return(1/3)
} else if (((-1 <= x) & (x < -0.5)) | ((0.5 < x) & (x <= 1))) {
return(0.2)
} else if (((-1.8 <= x) & (x < -1)) | ((1 < x) & (x <= 1.8))) {
return(0.07)
} else {
return(0)
}
}
squeeze_function_vec <- Vectorize(squeeze_function)
bounds <- seq(-3, 3, length.out = 5000)
lines(bounds, squeeze_function_vec(bounds), col = 'red')
